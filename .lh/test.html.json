{
    "sourceFile": "test.html",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 48,
            "patches": [
                {
                    "date": 1739941268096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740097808277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,253 @@\n <!DOCTYPE html>\r\n-<html lang=\"en\">\r\n+<html lang=\"ko\">\r\n <head>\r\n   <meta charset=\"UTF-8\">\r\n-  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n-  <title>Document</title>\r\n+  <title>내 위치 기반 스타벅스 매장 찾기 - 통합버전</title>\r\n+  <link rel=\"stylesheet\" href=\"style.css\">\r\n+\r\n+  <!-- Turf.js 라이브러리 (CDN) -->\r\n\\ No newline at end of file\n+  <script src=\"https://cdn.jsdelivr.net/npm/@turf/turf@6/turf.min.js\"></script>\r\n </head>\r\n <body>\r\n+  <!-- [섹션 1] 직접 입력 방식 -->\r\n+  <section id=\"section1\">\r\n+    <h1>내 위치에서 가장 가까운 스타벅스 찾기 (직접 입력)</h1>\r\n+    <p>아래 입력란에 위도와 경도를 직접 입력한 후, 버튼을 눌러 해당 위치에서 가장 가까운 스타벅스를 확인합니다.</p>\r\n+    <div>\r\n+      <input type=\"text\" id=\"latitude1\" placeholder=\"위도 입력 (예: 37.5665)\">\r\n+      <input type=\"text\" id=\"longitude1\" placeholder=\"경도 입력 (예: 126.9780)\">\r\n+    </div>\r\n+    <button id=\"findBtn1\">가장 가까운 스타벅스 찾기</button>\r\n+    <div id=\"result1\" class=\"result-box\"></div>\r\n+  </section>\r\n   \r\n+  <hr>\r\n+  \r\n+  <!-- [섹션 2] Geolocation 및 구 판별 방식 -->\r\n+  <section id=\"section2\">\r\n+    <h1>내 위치 기반 스타벅스 매장 찾기 (구 판별)</h1>\r\n+    <p>\r\n+      현재 위치의 위도/경도만으로 어느 구·군에 있는지 판별한 후, 해당 시도/구군 코드를 사용해 스타벅스 매장 정보를 가져옵니다.\r\n+    </p>\r\n+    <button id=\"findBtn2\">가장 가까운 스타벅스 찾기</button>\r\n+    <div id=\"result2\" class=\"result-box\"></div>\r\n+  </section>\r\n+  \r\n+  <script>\r\n+    /* ===============================\r\n+       [공통 함수들]\r\n+    ================================ */\r\n+    function computeDistance(lat1, lon1, lat2, lon2) {\r\n+      const toRad = x => x * Math.PI / 180;\r\n+      const R = 6371; // km\r\n+      const dLat = toRad(lat2 - lat1);\r\n+      const dLon = toRad(lon2 - lon1);\r\n+      const a = Math.sin(dLat/2) ** 2 +\r\n+                Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *\r\n+                Math.sin(dLon/2) ** 2;\r\n+      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n+      return R * c;\r\n+    }\r\n+    \r\n+    function findNearestStore(stores, currentLat, currentLng) {\r\n+      let nearestStore = null;\r\n+      let minDistance = Infinity;\r\n+      stores.forEach(store => {\r\n+        const storeLat = parseFloat(store.lat);\r\n+        const storeLng = store.lng ? parseFloat(store.lng) : parseFloat(store.lot);\r\n+        if (isNaN(storeLat) || isNaN(storeLng)) return;\r\n+        const distance = computeDistance(currentLat, currentLng, storeLat, storeLng);\r\n+        if (distance < minDistance) {\r\n+          minDistance = distance;\r\n+          nearestStore = { ...store, distance };\r\n+        }\r\n+      });\r\n+      return nearestStore;\r\n+    }\r\n+    \r\n+    /* ===============================\r\n+       [섹션 1] 직접 입력 방식 관련\r\n+    ================================ */\r\n+    async function fetchStarbucksStoresDirect(lat, lng) {\r\n+      // 예제에서는 서울(01) / 해운대구(0118) 사용\r\n+      const sido_cd = \"01\";\r\n+      const gugun_cd = \"0118\";\r\n+      const formData = new URLSearchParams();\r\n+      formData.append('ins_lat', lat);\r\n+      formData.append('ins_lng', lng);\r\n+      formData.append('p_sido_cd', sido_cd);\r\n+      formData.append('p_gugun_cd', gugun_cd);\r\n+      formData.append('in_biz_cd', '');\r\n+      formData.append('iend', '2000');\r\n+      formData.append('set_date', '');\r\n+      \r\n+      try {\r\n+        const response = await fetch(\"https://www.starbucks.co.kr/store/getStore.do\", {\r\n+          method: \"POST\",\r\n+          headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n+          body: formData.toString()\r\n+        });\r\n+        const data = await response.json();\r\n+        return data.list;\r\n+      } catch (error) {\r\n+        console.error(\"스타벅스 매장 데이터 요청 에러:\", error);\r\n+        throw error;\r\n+      }\r\n+    }\r\n+    \r\n+    document.getElementById(\"findBtn1\").addEventListener(\"click\", async () => {\r\n+      const resultDiv = document.getElementById(\"result1\");\r\n+      const latInput = document.getElementById(\"latitude1\").value.trim();\r\n+      const lngInput = document.getElementById(\"longitude1\").value.trim();\r\n+      if (!latInput || !lngInput) {\r\n+        resultDiv.innerHTML = \"<p class='detail'>위도와 경도를 입력하세요.</p>\";\r\n+        return;\r\n+      }\r\n+      const currentLat = parseFloat(latInput);\r\n+      const currentLng = parseFloat(lngInput);\r\n+      if (isNaN(currentLat) || isNaN(currentLng)) {\r\n+        resultDiv.innerHTML = \"<p class='detail'>유효한 위도와 경도를 입력하세요.</p>\";\r\n+        return;\r\n+      }\r\n+      resultDiv.innerHTML = `<p class=\"detail\">입력된 위치: <span class=\"highlight\">${currentLat.toFixed(5)}, ${currentLng.toFixed(5)}</span></p>\r\n+                              <p class=\"detail\">스타벅스 매장 정보를 가져오는 중입니다...</p>`;\r\n+      try {\r\n+        const stores = await fetchStarbucksStoresDirect(currentLat, currentLng);\r\n+        if (!stores || stores.length === 0) {\r\n+          resultDiv.innerHTML += \"<p class='detail'>매장 정보를 불러오지 못했습니다.</p>\";\r\n+          return;\r\n+        }\r\n+        const nearestStore = findNearestStore(stores, currentLat, currentLng);\r\n+        if (nearestStore) {\r\n+          resultDiv.innerHTML += `<p class=\"header\">가장 가까운 스타벅스 매장</p>\r\n+                                  <p class=\"detail\">매장명: <span class=\"highlight\">${nearestStore.s_name}</span></p>\r\n+                                  <p class=\"detail\">주소: <span class=\"highlight\">${nearestStore.addr}</span></p>\r\n+                                  <p class=\"detail\">약 <span class=\"highlight\">${nearestStore.distance.toFixed(2)}</span> km 떨어져 있습니다.</p>`;\r\n+        } else {\r\n+          resultDiv.innerHTML += \"<p class='detail'>좌표 정보를 찾을 수 없는 매장이 있습니다.</p>\";\r\n+        }\r\n+      } catch (error) {\r\n+        resultDiv.innerHTML = `<p class=\"detail\">에러 발생: ${error.message}</p>`;\r\n+      }\r\n+    });\r\n+    \r\n+    /* ===============================\r\n+       [섹션 2] Geolocation + 구 판별 방식 관련\r\n+       - mapping.json과 krDistricts.json 파일 필요 (서버에 존재해야 함)\r\n+    ================================ */\r\n+    let mappingData = {};\r\n+    let districtPolygons = [];\r\n+    \r\n+    async function loadMappingData() {\r\n+      try {\r\n+        const response = await fetch('mapping.json');\r\n+        mappingData = await response.json();\r\n+      } catch (error) {\r\n+        console.error(\"mapping.json 로드 에러:\", error);\r\n+      }\r\n+    }\r\n+    \r\n+    async function loadDistrictPolygons() {\r\n+      try {\r\n+        const response = await fetch('krDistricts.json');\r\n+        const data = await response.json();\r\n+        districtPolygons = data.districtPolygons;\r\n+      } catch (error) {\r\n+        console.error(\"krDistricts.json 로드 에러:\", error);\r\n+      }\r\n+    }\r\n+    \r\n+    function getCurrentLocation() {\r\n+      return new Promise((resolve, reject) => {\r\n+        if (navigator.geolocation) {\r\n+          navigator.geolocation.getCurrentPosition(resolve, reject);\r\n+        } else {\r\n+          reject(new Error(\"Geolocation을 지원하지 않는 브라우저입니다.\"));\r\n+        }\r\n+      });\r\n+    }\r\n+    \r\n+    // Turf.js를 이용해 현재 위치의 구·군 판별\r\n+    function determineDistrict(lat, lng) {\r\n+      const point = turf.point([lng, lat]);\r\n+      for (let district of districtPolygons) {\r\n+        if (turf.booleanPointInPolygon(point, district.polygon)) {\r\n+          return district;\r\n+        }\r\n+      }\r\n+      return null;\r\n+    }\r\n+    \r\n+    async function fetchStarbucksStoresByDistrict(lat, lng, sido_cd, gugun_cd) {\r\n+      const formData = new URLSearchParams();\r\n+      formData.append('ins_lat', lat);\r\n+      formData.append('ins_lng', lng);\r\n+      formData.append('p_sido_cd', sido_cd);\r\n+      formData.append('p_gugun_cd', gugun_cd);\r\n+      formData.append('in_biz_cd', '');\r\n+      formData.append('iend', '2000');\r\n+      formData.append('set_date', '');\r\n+      \r\n+      try {\r\n+        const response = await fetch(\"https://www.starbucks.co.kr/store/getStore.do\", {\r\n+          method: \"POST\",\r\n+          headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n+          body: formData.toString()\r\n+        });\r\n+        const data = await response.json();\r\n+        return data.list;\r\n+      } catch (error) {\r\n+        console.error(\"스타벅스 매장 데이터 요청 에러:\", error);\r\n+        throw error;\r\n+      }\r\n+    }\r\n+    \r\n+    document.getElementById(\"findBtn2\").addEventListener(\"click\", async () => {\r\n+      const resultDiv = document.getElementById(\"result2\");\r\n+      resultDiv.innerHTML = \"<p class='detail'>데이터를 불러오고 위치를 확인 중입니다...</p>\";\r\n+      try {\r\n+        await loadMappingData();\r\n+        await loadDistrictPolygons();\r\n+        const position = await getCurrentLocation();\r\n+        const currentLat = position.coords.latitude;\r\n+        const currentLng = position.coords.longitude;\r\n+        \r\n+        const district = determineDistrict(currentLat, currentLng);\r\n+        let sido_cd = mappingData.sidoMapping[\"서울\"]; // 기본값: 서울\r\n+        let gugun_cd;\r\n+        let districtMessage;\r\n+        if (district) {\r\n+          gugun_cd = district.code;\r\n+          districtMessage = `현재 위치는 <span class=\"highlight\">${district.name}</span>에 속합니다.`;\r\n+        } else {\r\n+          gugun_cd = \"0119\"; // 기본값: 중구\r\n+          districtMessage = \"현재 위치가 어느 구에도 속하지 않아 기본값(중구)을 사용합니다.\";\r\n+        }\r\n+        \r\n+        resultDiv.innerHTML = `<p class=\"detail\">현재 좌표: <span class=\"highlight\">${currentLat.toFixed(5)}, ${currentLng.toFixed(5)}</span></p>\r\n+                               <p class=\"detail\">${districtMessage}</p>\r\n+                               <p class=\"detail\">(사용 코드: <span class=\"highlight\">${sido_cd} / ${gugun_cd}</span>)</p>\r\n+                               <p class=\"detail\">스타벅스 매장 정보를 가져오는 중입니다...</p>`;\r\n+        \r\n+        const stores = await fetchStarbucksStoresByDistrict(currentLat, currentLng, sido_cd, gugun_cd);\r\n+        if (!stores || stores.length === 0) {\r\n+          resultDiv.innerHTML += \"<p class='detail'>매장 정보를 불러오지 못했습니다.</p>\";\r\n+          return;\r\n+        }\r\n+        \r\n+        const nearestStore = findNearestStore(stores, currentLat, currentLng);\r\n+        if (nearestStore) {\r\n+          resultDiv.innerHTML += `<p class=\"header\">가장 가까운 스타벅스 매장</p>\r\n+                                  <p class=\"detail\">매장명: <span class=\"highlight\">${nearestStore.s_name}</span></p>\r\n+                                  <p class=\"detail\">주소: <span class=\"highlight\">${nearestStore.addr}</span></p>\r\n+                                  <p class=\"detail\">약 <span class=\"highlight\">${nearestStore.distance.toFixed(2)}</span> km 떨어져 있습니다.</p>`;\r\n+        } else {\r\n+          resultDiv.innerHTML += \"<p class='detail'>좌표 정보를 찾을 수 없는 매장이 있습니다.</p>\";\r\n+        }\r\n+      } catch (error) {\r\n+        resultDiv.innerHTML = `<p class=\"detail\">에러 발생: ${error.message}</p>`;\r\n+      }\r\n+    });\r\n+  </script>\r\n </body>\r\n-</html>\n+</html>\r\n"
                },
                {
                    "date": 1740097932399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n <html lang=\"ko\">\r\n <head>\r\n   <meta charset=\"UTF-8\">\r\n   <title>내 위치 기반 스타벅스 매장 찾기 - 통합버전</title>\r\n-  <link rel=\"stylesheet\" href=\"style.css\">\r\n+  <link rel=\"stylesheet\" href=\"./css/style.css\">\r\n \r\n   <!-- Turf.js 라이브러리 (CDN) -->\r\n   <script src=\"https://cdn.jsdelivr.net/npm/@turf/turf@6/turf.min.js\"></script>\r\n </head>\r\n@@ -249,5 +249,5 @@\n       }\r\n     });\r\n   </script>\r\n </body>\r\n-</html>\n\\ No newline at end of file\n+</html>\r\n"
                },
                {
                    "date": 1740100039143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -227,9 +227,13 @@\n         resultDiv.innerHTML = `<p class=\"detail\">현재 좌표: <span class=\"highlight\">${currentLat.toFixed(5)}, ${currentLng.toFixed(5)}</span></p>\r\n                                <p class=\"detail\">${districtMessage}</p>\r\n                                <p class=\"detail\">(사용 코드: <span class=\"highlight\">${sido_cd} / ${gugun_cd}</span>)</p>\r\n                                <p class=\"detail\">스타벅스 매장 정보를 가져오는 중입니다...</p>`;\r\n-        \r\n+\r\n+                               \r\n+        console.log(`<p class=\"detail\">(사용 코드: <span class=\"highlight\">${sido_cd} / ${gugun_cd}</span>)</p>`);\r\n+        console.log(`<p class=\"detail\">(사용 코드: <span class=\"highlight\">${sido_cd} / ${gugun_cd}</span>)</p>`);\r\n+\r\n         const stores = await fetchStarbucksStoresByDistrict(currentLat, currentLng, sido_cd, gugun_cd);\r\n         if (!stores || stores.length === 0) {\r\n           resultDiv.innerHTML += \"<p class='detail'>매장 정보를 불러오지 못했습니다.</p>\";\r\n           return;\r\n"
                },
                {
                    "date": 1740100076723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -228,11 +228,11 @@\n                                <p class=\"detail\">${districtMessage}</p>\r\n                                <p class=\"detail\">(사용 코드: <span class=\"highlight\">${sido_cd} / ${gugun_cd}</span>)</p>\r\n                                <p class=\"detail\">스타벅스 매장 정보를 가져오는 중입니다...</p>`;\r\n \r\n-                               \r\n+\r\n+        console.log(`<p class=\"detail\">현재 좌표: <span class=\"highlight\">${currentLat.toFixed(5)}, ${currentLng.toFixed(5)}</span></p>`);\r\n         console.log(`<p class=\"detail\">(사용 코드: <span class=\"highlight\">${sido_cd} / ${gugun_cd}</span>)</p>`);\r\n-        console.log(`<p class=\"detail\">(사용 코드: <span class=\"highlight\">${sido_cd} / ${gugun_cd}</span>)</p>`);\r\n \r\n         const stores = await fetchStarbucksStoresByDistrict(currentLat, currentLng, sido_cd, gugun_cd);\r\n         if (!stores || stores.length === 0) {\r\n           resultDiv.innerHTML += \"<p class='detail'>매장 정보를 불러오지 못했습니다.</p>\";\r\n"
                },
                {
                    "date": 1740100665100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,18 +2,77 @@\n <html lang=\"ko\">\r\n <head>\r\n   <meta charset=\"UTF-8\">\r\n   <title>내 위치 기반 스타벅스 매장 찾기 - 통합버전</title>\r\n-  <link rel=\"stylesheet\" href=\"./css/style.css\">\r\n-\r\n+  <link rel=\"stylesheet\" href=\"style.css\">\r\n+  <style>\r\n+    body { font-family: Arial, sans-serif; margin: 20px; }\r\n+    hr { margin: 40px 0; }\r\n+    /* 결과 박스는 처음엔 숨김 처리 */\r\n+    .result-box { display: none; }\r\n+    \r\n+    /* 예시 좌표 블록 스타일 */\r\n+    .sample {\r\n+      margin-top: 10px;\r\n+      background: #f9f9f9;\r\n+      padding: 10px;\r\n+      border: 1px solid #ddd;\r\n+      border-radius: 5px;\r\n+      text-align: left;\r\n+      font-size: 14px;\r\n+    }\r\n+    .sample ul {\r\n+      list-style: none;\r\n+      padding: 0;\r\n+    }\r\n+    .sample li {\r\n+      border: 1px solid black;\r\n+      width: fit-content;\r\n+      padding: 5px;\r\n+      margin-bottom: 5px;\r\n+    }\r\n+    .sample li div {\r\n+      border: 1px solid pink;\r\n+      margin: 4px;\r\n+      padding: 2px;\r\n+    }\r\n+  </style>\r\n   <!-- Turf.js 라이브러리 (CDN) -->\r\n   <script src=\"https://cdn.jsdelivr.net/npm/@turf/turf@6/turf.min.js\"></script>\r\n </head>\r\n <body>\r\n   <!-- [섹션 1] 직접 입력 방식 -->\r\n   <section id=\"section1\">\r\n     <h1>내 위치에서 가장 가까운 스타벅스 찾기 (직접 입력)</h1>\r\n-    <p>아래 입력란에 위도와 경도를 직접 입력한 후, 버튼을 눌러 해당 위치에서 가장 가까운 스타벅스를 확인합니다.</p>\r\n+    <p>\r\n+      아래 입력란에 위도와 경도를 직접 입력한 후, 버튼을 눌러 해당 위치에서 가장 가까운 스타벅스를 확인합니다.\r\n+    </p>\r\n+    <!-- 예시 좌표 블록 -->\r\n+    <div class=\"sample\">\r\n+      <a href=\"https://jusoga.com/\" target=\"_blank\">위도 경도 찾기 사이트</a>\r\n+      <ul>\r\n+        <li>\r\n+          <span>남산스퀘어(우리 장소)</span>\r\n+          <div>위도: 37.56165121272</div>\r\n+          <div>경도: 126.99110648606</div>\r\n+        </li>\r\n+        <li>\r\n+          <span>성균관대학교(명륜)</span>\r\n+          <div>위도: 37.584907418709</div>\r\n+          <div>경도: 126.99694886506</div>\r\n+        </li>\r\n+        <li>\r\n+          <span>단국대학교(죽전)</span>\r\n+          <div>위도: 37.323468556539</div>\r\n+          <div>경도: 127.12558057358</div>\r\n+        </li>\r\n+        <li>\r\n+          <span>부산광역시 해운대구 해운대로 913 (좌동)</span>\r\n+          <div>위도: 35.176747504632</div>\r\n+          <div>경도: 129.18405788222</div>\r\n+        </li>\r\n+      </ul>\r\n+    </div>\r\n     <div>\r\n       <input type=\"text\" id=\"latitude1\" placeholder=\"위도 입력 (예: 37.5665)\">\r\n       <input type=\"text\" id=\"longitude1\" placeholder=\"경도 입력 (예: 126.9780)\">\r\n     </div>\r\n@@ -22,9 +81,9 @@\n   </section>\r\n   \r\n   <hr>\r\n   \r\n-  <!-- [섹션 2] Geolocation 및 구 판별 방식 -->\r\n+  <!-- [섹션 2] Geolocation + 구 판별 방식 -->\r\n   <section id=\"section2\">\r\n     <h1>내 위치 기반 스타벅스 매장 찾기 (구 판별)</h1>\r\n     <p>\r\n       현재 위치의 위도/경도만으로 어느 구·군에 있는지 판별한 후, 해당 시도/구군 코드를 사용해 스타벅스 매장 정보를 가져옵니다.\r\n@@ -96,8 +155,10 @@\n     }\r\n     \r\n     document.getElementById(\"findBtn1\").addEventListener(\"click\", async () => {\r\n       const resultDiv = document.getElementById(\"result1\");\r\n+      // 결과 박스 보이기\r\n+      resultDiv.style.display = \"block\";\r\n       const latInput = document.getElementById(\"latitude1\").value.trim();\r\n       const lngInput = document.getElementById(\"longitude1\").value.trim();\r\n       if (!latInput || !lngInput) {\r\n         resultDiv.innerHTML = \"<p class='detail'>위도와 경도를 입력하세요.</p>\";\r\n@@ -203,8 +264,9 @@\n     }\r\n     \r\n     document.getElementById(\"findBtn2\").addEventListener(\"click\", async () => {\r\n       const resultDiv = document.getElementById(\"result2\");\r\n+      resultDiv.style.display = \"block\";\r\n       resultDiv.innerHTML = \"<p class='detail'>데이터를 불러오고 위치를 확인 중입니다...</p>\";\r\n       try {\r\n         await loadMappingData();\r\n         await loadDistrictPolygons();\r\n@@ -227,13 +289,9 @@\n         resultDiv.innerHTML = `<p class=\"detail\">현재 좌표: <span class=\"highlight\">${currentLat.toFixed(5)}, ${currentLng.toFixed(5)}</span></p>\r\n                                <p class=\"detail\">${districtMessage}</p>\r\n                                <p class=\"detail\">(사용 코드: <span class=\"highlight\">${sido_cd} / ${gugun_cd}</span>)</p>\r\n                                <p class=\"detail\">스타벅스 매장 정보를 가져오는 중입니다...</p>`;\r\n-\r\n-\r\n-        console.log(`<p class=\"detail\">현재 좌표: <span class=\"highlight\">${currentLat.toFixed(5)}, ${currentLng.toFixed(5)}</span></p>`);\r\n-        console.log(`<p class=\"detail\">(사용 코드: <span class=\"highlight\">${sido_cd} / ${gugun_cd}</span>)</p>`);\r\n-\r\n+        \r\n         const stores = await fetchStarbucksStoresByDistrict(currentLat, currentLng, sido_cd, gugun_cd);\r\n         if (!stores || stores.length === 0) {\r\n           resultDiv.innerHTML += \"<p class='detail'>매장 정보를 불러오지 못했습니다.</p>\";\r\n           return;\r\n"
                },
                {
                    "date": 1740100714118,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n <html lang=\"ko\">\r\n <head>\r\n   <meta charset=\"UTF-8\">\r\n   <title>내 위치 기반 스타벅스 매장 찾기 - 통합버전</title>\r\n-  <link rel=\"stylesheet\" href=\"style.css\">\r\n+  <link rel=\"stylesheet\" href=\"./css/style.css\">\r\n   <style>\r\n     body { font-family: Arial, sans-serif; margin: 20px; }\r\n     hr { margin: 40px 0; }\r\n     /* 결과 박스는 처음엔 숨김 처리 */\r\n"
                },
                {
                    "date": 1740101700154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,39 +2,44 @@\n <html lang=\"ko\">\r\n <head>\r\n   <meta charset=\"UTF-8\">\r\n   <title>내 위치 기반 스타벅스 매장 찾기 - 통합버전</title>\r\n-  <link rel=\"stylesheet\" href=\"./css/style.css\">\r\n+  <link rel=\"stylesheet\" href=\"style.css\">\r\n   <style>\r\n     body { font-family: Arial, sans-serif; margin: 20px; }\r\n     hr { margin: 40px 0; }\r\n-    /* 결과 박스는 처음엔 숨김 처리 */\r\n+    /* 결과 박스는 기본적으로 감춤 */\r\n     .result-box { display: none; }\r\n     \r\n-    /* 예시 좌표 블록 스타일 */\r\n+    /* 예시 좌표 영역 - 카드 형태로 수평 배치 */\r\n     .sample {\r\n       margin-top: 10px;\r\n       background: #f9f9f9;\r\n       padding: 10px;\r\n       border: 1px solid #ddd;\r\n       border-radius: 5px;\r\n-      text-align: left;\r\n-      font-size: 14px;\r\n+      display: flex;\r\n+      gap: 10px;\r\n+      justify-content: center;\r\n+      flex-wrap: wrap;\r\n     }\r\n     .sample ul {\r\n+      display: flex;\r\n+      gap: 10px;\r\n       list-style: none;\r\n       padding: 0;\r\n+      margin: 0;\r\n     }\r\n     .sample li {\r\n-      border: 1px solid black;\r\n-      width: fit-content;\r\n-      padding: 5px;\r\n-      margin-bottom: 5px;\r\n+      border: 1px solid #ccc;\r\n+      padding: 10px;\r\n+      border-radius: 8px;\r\n+      width: 180px;\r\n+      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n     }\r\n     .sample li div {\r\n-      border: 1px solid pink;\r\n-      margin: 4px;\r\n-      padding: 2px;\r\n+      border: none;\r\n+      margin: 4px 0;\r\n     }\r\n   </style>\r\n   <!-- Turf.js 라이브러리 (CDN) -->\r\n   <script src=\"https://cdn.jsdelivr.net/npm/@turf/turf@6/turf.min.js\"></script>\r\n@@ -45,9 +50,9 @@\n     <h1>내 위치에서 가장 가까운 스타벅스 찾기 (직접 입력)</h1>\r\n     <p>\r\n       아래 입력란에 위도와 경도를 직접 입력한 후, 버튼을 눌러 해당 위치에서 가장 가까운 스타벅스를 확인합니다.\r\n     </p>\r\n-    <!-- 예시 좌표 블록 -->\r\n+    <!-- 예시 좌표 영역 -->\r\n     <div class=\"sample\">\r\n       <a href=\"https://jusoga.com/\" target=\"_blank\">위도 경도 찾기 사이트</a>\r\n       <ul>\r\n         <li>\r\n@@ -65,17 +70,30 @@\n           <div>위도: 37.323468556539</div>\r\n           <div>경도: 127.12558057358</div>\r\n         </li>\r\n         <li>\r\n-          <span>부산광역시 해운대구 해운대로 913 (좌동)</span>\r\n+          <span>부산 해운대구</span>\r\n           <div>위도: 35.176747504632</div>\r\n           <div>경도: 129.18405788222</div>\r\n         </li>\r\n       </ul>\r\n     </div>\r\n     <div>\r\n-      <input type=\"text\" id=\"latitude1\" placeholder=\"위도 입력 (예: 37.5665)\">\r\n-      <input type=\"text\" id=\"longitude1\" placeholder=\"경도 입력 (예: 126.9780)\">\r\n+      <!-- datalist를 사용하여 추천 옵션 추가 -->\r\n+      <input type=\"text\" id=\"latitude1\" placeholder=\"위도 입력 (예: 37.5665)\" list=\"latOptions\">\r\n+      <datalist id=\"latOptions\">\r\n+        <option value=\"37.56165121272\"></option>\r\n+        <option value=\"37.584907418709\"></option>\r\n+        <option value=\"37.323468556539\"></option>\r\n+        <option value=\"35.176747504632\"></option>\r\n+      </datalist>\r\n+      <input type=\"text\" id=\"longitude1\" placeholder=\"경도 입력 (예: 126.9780)\" list=\"lngOptions\">\r\n+      <datalist id=\"lngOptions\">\r\n+        <option value=\"126.99110648606\"></option>\r\n+        <option value=\"126.99694886506\"></option>\r\n+        <option value=\"127.12558057358\"></option>\r\n+        <option value=\"129.18405788222\"></option>\r\n+      </datalist>\r\n     </div>\r\n     <button id=\"findBtn1\">가장 가까운 스타벅스 찾기</button>\r\n     <div id=\"result1\" class=\"result-box\"></div>\r\n   </section>\r\n@@ -155,10 +173,13 @@\n     }\r\n     \r\n     document.getElementById(\"findBtn1\").addEventListener(\"click\", async () => {\r\n       const resultDiv = document.getElementById(\"result1\");\r\n-      // 결과 박스 보이기\r\n+      // 결과 영역 보이기\r\n       resultDiv.style.display = \"block\";\r\n+      // 먼저 로딩 메시지 출력\r\n+      resultDiv.innerHTML = `<p class=\"detail\">입력된 위치: <span class=\"highlight\">--, --</span></p>\r\n+                             <p class=\"detail loading\">스타벅스 매장 정보를 가져오는 중입니다...</p>`;\r\n       const latInput = document.getElementById(\"latitude1\").value.trim();\r\n       const lngInput = document.getElementById(\"longitude1\").value.trim();\r\n       if (!latInput || !lngInput) {\r\n         resultDiv.innerHTML = \"<p class='detail'>위도와 경도를 입력하세요.</p>\";\r\n@@ -169,25 +190,30 @@\n       if (isNaN(currentLat) || isNaN(currentLng)) {\r\n         resultDiv.innerHTML = \"<p class='detail'>유효한 위도와 경도를 입력하세요.</p>\";\r\n         return;\r\n       }\r\n+      // 업데이트: 입력된 좌표 표시\r\n       resultDiv.innerHTML = `<p class=\"detail\">입력된 위치: <span class=\"highlight\">${currentLat.toFixed(5)}, ${currentLng.toFixed(5)}</span></p>\r\n-                              <p class=\"detail\">스타벅스 매장 정보를 가져오는 중입니다...</p>`;\r\n+                             <p class=\"detail loading\">스타벅스 매장 정보를 가져오는 중입니다...</p>`;\r\n       try {\r\n         const stores = await fetchStarbucksStoresDirect(currentLat, currentLng);\r\n+        // 응답 도착 시 로딩 메시지를 제거하고 결과로 대체\r\n+        let finalHTML = `<p class=\"detail\">입력된 위치: <span class=\"highlight\">${currentLat.toFixed(5)}, ${currentLng.toFixed(5)}</span></p>`;\r\n         if (!stores || stores.length === 0) {\r\n-          resultDiv.innerHTML += \"<p class='detail'>매장 정보를 불러오지 못했습니다.</p>\";\r\n+          finalHTML += `<p class=\"detail\">매장 정보를 불러오지 못했습니다.</p>`;\r\n+          resultDiv.innerHTML = finalHTML;\r\n           return;\r\n         }\r\n         const nearestStore = findNearestStore(stores, currentLat, currentLng);\r\n         if (nearestStore) {\r\n-          resultDiv.innerHTML += `<p class=\"header\">가장 가까운 스타벅스 매장</p>\r\n-                                  <p class=\"detail\">매장명: <span class=\"highlight\">${nearestStore.s_name}</span></p>\r\n-                                  <p class=\"detail\">주소: <span class=\"highlight\">${nearestStore.addr}</span></p>\r\n-                                  <p class=\"detail\">약 <span class=\"highlight\">${nearestStore.distance.toFixed(2)}</span> km 떨어져 있습니다.</p>`;\r\n+          finalHTML += `<p class=\"header\">가장 가까운 스타벅스 매장</p>\r\n+                        <p class=\"detail\">매장명: <span class=\"highlight\">${nearestStore.s_name}</span></p>\r\n+                        <p class=\"detail\">주소: <span class=\"highlight\">${nearestStore.addr}</span></p>\r\n+                        <p class=\"detail\">약 <span class=\"highlight\">${nearestStore.distance.toFixed(2)}</span> km 떨어져 있습니다.</p>`;\r\n         } else {\r\n-          resultDiv.innerHTML += \"<p class='detail'>좌표 정보를 찾을 수 없는 매장이 있습니다.</p>\";\r\n+          finalHTML += `<p class=\"detail\">좌표 정보를 찾을 수 없는 매장이 있습니다.</p>`;\r\n         }\r\n+        resultDiv.innerHTML = finalHTML;\r\n       } catch (error) {\r\n         resultDiv.innerHTML = `<p class=\"detail\">에러 발생: ${error.message}</p>`;\r\n       }\r\n     });\r\n@@ -265,9 +291,9 @@\n     \r\n     document.getElementById(\"findBtn2\").addEventListener(\"click\", async () => {\r\n       const resultDiv = document.getElementById(\"result2\");\r\n       resultDiv.style.display = \"block\";\r\n-      resultDiv.innerHTML = \"<p class='detail'>데이터를 불러오고 위치를 확인 중입니다...</p>\";\r\n+      resultDiv.innerHTML = `<p class=\"detail\">데이터를 불러오고 위치를 확인 중입니다...</p>`;\r\n       try {\r\n         await loadMappingData();\r\n         await loadDistrictPolygons();\r\n         const position = await getCurrentLocation();\r\n@@ -285,28 +311,31 @@\n           gugun_cd = \"0119\"; // 기본값: 중구\r\n           districtMessage = \"현재 위치가 어느 구에도 속하지 않아 기본값(중구)을 사용합니다.\";\r\n         }\r\n         \r\n-        resultDiv.innerHTML = `<p class=\"detail\">현재 좌표: <span class=\"highlight\">${currentLat.toFixed(5)}, ${currentLng.toFixed(5)}</span></p>\r\n-                               <p class=\"detail\">${districtMessage}</p>\r\n-                               <p class=\"detail\">(사용 코드: <span class=\"highlight\">${sido_cd} / ${gugun_cd}</span>)</p>\r\n-                               <p class=\"detail\">스타벅스 매장 정보를 가져오는 중입니다...</p>`;\r\n+        let finalHTML = `<p class=\"detail\">현재 좌표: <span class=\"highlight\">${currentLat.toFixed(5)}, ${currentLng.toFixed(5)}</span></p>\r\n+                         <p class=\"detail\">${districtMessage}</p>\r\n+                         <p class=\"detail\">(사용 코드: <span class=\"highlight\">${sido_cd} / ${gugun_cd}</span>)</p>`;\r\n+        finalHTML += `<p class=\"detail\">스타벅스 매장 정보를 가져오는 중입니다...</p>`;\r\n+        resultDiv.innerHTML = finalHTML;\r\n         \r\n         const stores = await fetchStarbucksStoresByDistrict(currentLat, currentLng, sido_cd, gugun_cd);\r\n         if (!stores || stores.length === 0) {\r\n-          resultDiv.innerHTML += \"<p class='detail'>매장 정보를 불러오지 못했습니다.</p>\";\r\n+          finalHTML += `<p class=\"detail\">매장 정보를 불러오지 못했습니다.</p>`;\r\n+          resultDiv.innerHTML = finalHTML;\r\n           return;\r\n         }\r\n         \r\n         const nearestStore = findNearestStore(stores, currentLat, currentLng);\r\n         if (nearestStore) {\r\n-          resultDiv.innerHTML += `<p class=\"header\">가장 가까운 스타벅스 매장</p>\r\n-                                  <p class=\"detail\">매장명: <span class=\"highlight\">${nearestStore.s_name}</span></p>\r\n-                                  <p class=\"detail\">주소: <span class=\"highlight\">${nearestStore.addr}</span></p>\r\n-                                  <p class=\"detail\">약 <span class=\"highlight\">${nearestStore.distance.toFixed(2)}</span> km 떨어져 있습니다.</p>`;\r\n+          finalHTML += `<p class=\"header\">가장 가까운 스타벅스 매장</p>\r\n+                        <p class=\"detail\">매장명: <span class=\"highlight\">${nearestStore.s_name}</span></p>\r\n+                        <p class=\"detail\">주소: <span class=\"highlight\">${nearestStore.addr}</span></p>\r\n+                        <p class=\"detail\">약 <span class=\"highlight\">${nearestStore.distance.toFixed(2)}</span> km 떨어져 있습니다.</p>`;\r\n         } else {\r\n-          resultDiv.innerHTML += \"<p class='detail'>좌표 정보를 찾을 수 없는 매장이 있습니다.</p>\";\r\n+          finalHTML += `<p class=\"detail\">좌표 정보를 찾을 수 없는 매장이 있습니다.</p>`;\r\n         }\r\n+        resultDiv.innerHTML = finalHTML;\r\n       } catch (error) {\r\n         resultDiv.innerHTML = `<p class=\"detail\">에러 발생: ${error.message}</p>`;\r\n       }\r\n     });\r\n"
                },
                {
                    "date": 1740101756225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n <html lang=\"ko\">\r\n <head>\r\n   <meta charset=\"UTF-8\">\r\n   <title>내 위치 기반 스타벅스 매장 찾기 - 통합버전</title>\r\n-  <link rel=\"stylesheet\" href=\"style.css\">\r\n+  <link rel=\"stylesheet\" href=\"./css/style.css\">\r\n   <style>\r\n     body { font-family: Arial, sans-serif; margin: 20px; }\r\n     hr { margin: 40px 0; }\r\n     /* 결과 박스는 기본적으로 감춤 */\r\n"
                },
                {
                    "date": 1740101841220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,9 @@\n       flex-wrap: wrap;\r\n     }\r\n     .sample ul {\r\n       display: flex;\r\n+      flex-direction: column;\r\n       gap: 10px;\r\n       list-style: none;\r\n       padding: 0;\r\n       margin: 0;\r\n"
                },
                {
                    "date": 1740102053496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,10 +52,10 @@\n     <p>\r\n       아래 입력란에 위도와 경도를 직접 입력한 후, 버튼을 눌러 해당 위치에서 가장 가까운 스타벅스를 확인합니다.\r\n     </p>\r\n     <!-- 예시 좌표 영역 -->\r\n+    <a href=\"https://jusoga.com/\" target=\"_blank\">위도 경도 찾기 사이트</a>\r\n     <div class=\"sample\">\r\n-      <a href=\"https://jusoga.com/\" target=\"_blank\">위도 경도 찾기 사이트</a>\r\n       <ul>\r\n         <li>\r\n           <span>남산스퀘어(우리 장소)</span>\r\n           <div>위도: 37.56165121272</div>\r\n"
                },
                {
                    "date": 1740102067894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,15 +17,15 @@\n       padding: 10px;\r\n       border: 1px solid #ddd;\r\n       border-radius: 5px;\r\n       display: flex;\r\n+      flex-direction: column;\r\n       gap: 10px;\r\n       justify-content: center;\r\n       flex-wrap: wrap;\r\n     }\r\n     .sample ul {\r\n       display: flex;\r\n-      flex-direction: column;\r\n       gap: 10px;\r\n       list-style: none;\r\n       padding: 0;\r\n       margin: 0;\r\n"
                },
                {
                    "date": 1740102116842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,10 +52,10 @@\n     <p>\r\n       아래 입력란에 위도와 경도를 직접 입력한 후, 버튼을 눌러 해당 위치에서 가장 가까운 스타벅스를 확인합니다.\r\n     </p>\r\n     <!-- 예시 좌표 영역 -->\r\n-    <a href=\"https://jusoga.com/\" target=\"_blank\">위도 경도 찾기 사이트</a>\r\n     <div class=\"sample\">\r\n+      <a href=\"https://jusoga.com/\" target=\"_blank\">위도 경도 찾기 사이트</a>\r\n       <ul>\r\n         <li>\r\n           <span>남산스퀘어(우리 장소)</span>\r\n           <div>위도: 37.56165121272</div>\r\n"
                },
                {
                    "date": 1740102138912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n       padding: 10px;\r\n       border: 1px solid #ddd;\r\n       border-radius: 5px;\r\n       display: flex;\r\n-      flex-direction: column;\r\n+\r\n       gap: 10px;\r\n       justify-content: center;\r\n       flex-wrap: wrap;\r\n     }\r\n"
                },
                {
                    "date": 1740102312902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,344 +2,215 @@\n <html lang=\"ko\">\r\n <head>\r\n   <meta charset=\"UTF-8\">\r\n   <title>내 위치 기반 스타벅스 매장 찾기 - 통합버전</title>\r\n-  <link rel=\"stylesheet\" href=\"./css/style.css\">\r\n+  <link rel=\"stylesheet\" href=\"style.css\">\r\n   <style>\r\n-    body { font-family: Arial, sans-serif; margin: 20px; }\r\n-    hr { margin: 40px 0; }\r\n-    /* 결과 박스는 기본적으로 감춤 */\r\n-    .result-box { display: none; }\r\n+    body {\r\n+      font-family: 'Noto Sans KR', Arial, sans-serif;\r\n+      background-color: #f2f0eb;\r\n+      margin: 0;\r\n+      padding: 20px;\r\n+      text-align: center;\r\n+    }\r\n+    h1 {\r\n+      font-size: 26px;\r\n+      font-weight: bold;\r\n+      color: #006241;\r\n+    }\r\n+    p {\r\n+      font-size: 18px;\r\n+      color: #444;\r\n+    }\r\n     \r\n-    /* 예시 좌표 영역 - 카드 형태로 수평 배치 */\r\n-    .sample {\r\n-      margin-top: 10px;\r\n-      background: #f9f9f9;\r\n-      padding: 10px;\r\n-      border: 1px solid #ddd;\r\n+    /* 링크 스타일 */\r\n+    .location-link {\r\n+      display: inline-block;\r\n+      background-color: #006241;\r\n+      color: white;\r\n+      padding: 8px 16px;\r\n+      font-size: 16px;\r\n+      text-decoration: none;\r\n       border-radius: 5px;\r\n-      display: flex;\r\n-\r\n-      gap: 10px;\r\n-      justify-content: center;\r\n-      flex-wrap: wrap;\r\n+      transition: 0.3s;\r\n+      margin-bottom: 15px;\r\n     }\r\n+    .location-link:hover {\r\n+      background-color: #004d32;\r\n+    }\r\n+    \r\n+    /* 예시 좌표 영역 */\r\n+    .sample {\r\n+      margin-top: 20px;\r\n+      background: white;\r\n+      padding: 20px;\r\n+      border-radius: 10px;\r\n+      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);\r\n+    }\r\n+    \r\n+    /* 예시 리스트 */\r\n     .sample ul {\r\n       display: flex;\r\n       gap: 10px;\r\n       list-style: none;\r\n       padding: 0;\r\n-      margin: 0;\r\n+      justify-content: center;\r\n+      flex-wrap: wrap;\r\n     }\r\n     .sample li {\r\n-      border: 1px solid #ccc;\r\n-      padding: 10px;\r\n+      background: #f8f8f8;\r\n+      padding: 15px;\r\n       border-radius: 8px;\r\n-      width: 180px;\r\n-      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n+      width: 200px;\r\n+      box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);\r\n+      text-align: center;\r\n     }\r\n     .sample li div {\r\n-      border: none;\r\n+      font-size: 14px;\r\n+      color: #333;\r\n       margin: 4px 0;\r\n     }\r\n+    \r\n+    /* 입력창 & 버튼 */\r\n+    input {\r\n+      padding: 10px;\r\n+      font-size: 16px;\r\n+      width: 220px;\r\n+      border: 2px solid #ccc;\r\n+      border-radius: 5px;\r\n+      text-align: center;\r\n+    }\r\n+    input:focus {\r\n+      border-color: #006241;\r\n+    }\r\n+    button {\r\n+      background-color: #006241;\r\n+      color: white;\r\n+      border: none;\r\n+      padding: 12px 18px;\r\n+      font-size: 16px;\r\n+      cursor: pointer;\r\n+      border-radius: 5px;\r\n+      transition: 0.3s;\r\n+      font-weight: bold;\r\n+    }\r\n+    button:hover {\r\n+      background-color: #004d32;\r\n+    }\r\n+    \r\n+    /* 결과 박스 */\r\n+    .result-box {\r\n+      background: white;\r\n+      padding: 20px;\r\n+      border-radius: 10px;\r\n+      margin-top: 20px;\r\n+      box-shadow: 0px 3px 8px rgba(0, 0, 0, 0.1);\r\n+      text-align: left;\r\n+      display: none;\r\n+    }\r\n+    .result-box p {\r\n+      margin: 8px 0;\r\n+    }\r\n+    .highlight {\r\n+      font-weight: bold;\r\n+      color: #006241;\r\n+    }\r\n+    .loading {\r\n+      color: #d4a373;\r\n+      font-weight: bold;\r\n+    }\r\n   </style>\r\n-  <!-- Turf.js 라이브러리 (CDN) -->\r\n-  <script src=\"https://cdn.jsdelivr.net/npm/@turf/turf@6/turf.min.js\"></script>\r\n </head>\r\n <body>\r\n+  \r\n   <!-- [섹션 1] 직접 입력 방식 -->\r\n   <section id=\"section1\">\r\n     <h1>내 위치에서 가장 가까운 스타벅스 찾기 (직접 입력)</h1>\r\n-    <p>\r\n-      아래 입력란에 위도와 경도를 직접 입력한 후, 버튼을 눌러 해당 위치에서 가장 가까운 스타벅스를 확인합니다.\r\n-    </p>\r\n+    <p>아래 입력란에 위도와 경도를 직접 입력한 후, 버튼을 눌러 해당 위치에서 가장 가까운 스타벅스를 확인합니다.</p>\r\n+\r\n+    <!-- 링크 -->\r\n+    <a href=\"https://jusoga.com/\" target=\"_blank\" class=\"location-link\">📍 위도/경도 찾기 사이트</a>\r\n+\r\n     <!-- 예시 좌표 영역 -->\r\n     <div class=\"sample\">\r\n-      <a href=\"https://jusoga.com/\" target=\"_blank\">위도 경도 찾기 사이트</a>\r\n+      <h2>📌 예시 좌표 목록</h2>\r\n       <ul>\r\n         <li>\r\n-          <span>남산스퀘어(우리 장소)</span>\r\n-          <div>위도: 37.56165121272</div>\r\n-          <div>경도: 126.99110648606</div>\r\n+          <strong>남산스퀘어</strong>\r\n+          <div>위도: 37.56165</div>\r\n+          <div>경도: 126.99110</div>\r\n         </li>\r\n         <li>\r\n-          <span>성균관대학교(명륜)</span>\r\n-          <div>위도: 37.584907418709</div>\r\n-          <div>경도: 126.99694886506</div>\r\n+          <strong>성균관대학교(명륜)</strong>\r\n+          <div>위도: 37.58490</div>\r\n+          <div>경도: 126.99694</div>\r\n         </li>\r\n         <li>\r\n-          <span>단국대학교(죽전)</span>\r\n-          <div>위도: 37.323468556539</div>\r\n-          <div>경도: 127.12558057358</div>\r\n+          <strong>단국대학교(죽전)</strong>\r\n+          <div>위도: 37.32346</div>\r\n+          <div>경도: 127.12558</div>\r\n         </li>\r\n         <li>\r\n-          <span>부산 해운대구</span>\r\n-          <div>위도: 35.176747504632</div>\r\n-          <div>경도: 129.18405788222</div>\r\n+          <strong>부산 해운대구</strong>\r\n+          <div>위도: 35.17674</div>\r\n+          <div>경도: 129.18405</div>\r\n         </li>\r\n       </ul>\r\n     </div>\r\n+\r\n     <div>\r\n       <!-- datalist를 사용하여 추천 옵션 추가 -->\r\n       <input type=\"text\" id=\"latitude1\" placeholder=\"위도 입력 (예: 37.5665)\" list=\"latOptions\">\r\n       <datalist id=\"latOptions\">\r\n-        <option value=\"37.56165121272\"></option>\r\n-        <option value=\"37.584907418709\"></option>\r\n-        <option value=\"37.323468556539\"></option>\r\n-        <option value=\"35.176747504632\"></option>\r\n+        <option value=\"37.56165\"></option>\r\n+        <option value=\"37.58490\"></option>\r\n+        <option value=\"37.32346\"></option>\r\n+        <option value=\"35.17674\"></option>\r\n       </datalist>\r\n       <input type=\"text\" id=\"longitude1\" placeholder=\"경도 입력 (예: 126.9780)\" list=\"lngOptions\">\r\n       <datalist id=\"lngOptions\">\r\n-        <option value=\"126.99110648606\"></option>\r\n-        <option value=\"126.99694886506\"></option>\r\n-        <option value=\"127.12558057358\"></option>\r\n-        <option value=\"129.18405788222\"></option>\r\n+        <option value=\"126.99110\"></option>\r\n+        <option value=\"126.99694\"></option>\r\n+        <option value=\"127.12558\"></option>\r\n+        <option value=\"129.18405\"></option>\r\n       </datalist>\r\n     </div>\r\n     <button id=\"findBtn1\">가장 가까운 스타벅스 찾기</button>\r\n     <div id=\"result1\" class=\"result-box\"></div>\r\n   </section>\r\n-  \r\n-  <hr>\r\n-  \r\n-  <!-- [섹션 2] Geolocation + 구 판별 방식 -->\r\n-  <section id=\"section2\">\r\n-    <h1>내 위치 기반 스타벅스 매장 찾기 (구 판별)</h1>\r\n-    <p>\r\n-      현재 위치의 위도/경도만으로 어느 구·군에 있는지 판별한 후, 해당 시도/구군 코드를 사용해 스타벅스 매장 정보를 가져옵니다.\r\n-    </p>\r\n-    <button id=\"findBtn2\">가장 가까운 스타벅스 찾기</button>\r\n-    <div id=\"result2\" class=\"result-box\"></div>\r\n-  </section>\r\n-  \r\n+\r\n   <script>\r\n-    /* ===============================\r\n-       [공통 함수들]\r\n-    ================================ */\r\n-    function computeDistance(lat1, lon1, lat2, lon2) {\r\n-      const toRad = x => x * Math.PI / 180;\r\n-      const R = 6371; // km\r\n-      const dLat = toRad(lat2 - lat1);\r\n-      const dLon = toRad(lon2 - lon1);\r\n-      const a = Math.sin(dLat/2) ** 2 +\r\n-                Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *\r\n-                Math.sin(dLon/2) ** 2;\r\n-      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n-      return R * c;\r\n-    }\r\n-    \r\n-    function findNearestStore(stores, currentLat, currentLng) {\r\n-      let nearestStore = null;\r\n-      let minDistance = Infinity;\r\n-      stores.forEach(store => {\r\n-        const storeLat = parseFloat(store.lat);\r\n-        const storeLng = store.lng ? parseFloat(store.lng) : parseFloat(store.lot);\r\n-        if (isNaN(storeLat) || isNaN(storeLng)) return;\r\n-        const distance = computeDistance(currentLat, currentLng, storeLat, storeLng);\r\n-        if (distance < minDistance) {\r\n-          minDistance = distance;\r\n-          nearestStore = { ...store, distance };\r\n-        }\r\n-      });\r\n-      return nearestStore;\r\n-    }\r\n-    \r\n-    /* ===============================\r\n-       [섹션 1] 직접 입력 방식 관련\r\n-    ================================ */\r\n-    async function fetchStarbucksStoresDirect(lat, lng) {\r\n-      // 예제에서는 서울(01) / 해운대구(0118) 사용\r\n-      const sido_cd = \"01\";\r\n-      const gugun_cd = \"0118\";\r\n-      const formData = new URLSearchParams();\r\n-      formData.append('ins_lat', lat);\r\n-      formData.append('ins_lng', lng);\r\n-      formData.append('p_sido_cd', sido_cd);\r\n-      formData.append('p_gugun_cd', gugun_cd);\r\n-      formData.append('in_biz_cd', '');\r\n-      formData.append('iend', '2000');\r\n-      formData.append('set_date', '');\r\n-      \r\n-      try {\r\n-        const response = await fetch(\"https://www.starbucks.co.kr/store/getStore.do\", {\r\n-          method: \"POST\",\r\n-          headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n-          body: formData.toString()\r\n-        });\r\n-        const data = await response.json();\r\n-        return data.list;\r\n-      } catch (error) {\r\n-        console.error(\"스타벅스 매장 데이터 요청 에러:\", error);\r\n-        throw error;\r\n-      }\r\n-    }\r\n-    \r\n     document.getElementById(\"findBtn1\").addEventListener(\"click\", async () => {\r\n       const resultDiv = document.getElementById(\"result1\");\r\n-      // 결과 영역 보이기\r\n       resultDiv.style.display = \"block\";\r\n-      // 먼저 로딩 메시지 출력\r\n-      resultDiv.innerHTML = `<p class=\"detail\">입력된 위치: <span class=\"highlight\">--, --</span></p>\r\n-                             <p class=\"detail loading\">스타벅스 매장 정보를 가져오는 중입니다...</p>`;\r\n+      resultDiv.innerHTML = `<p class=\"loading\">스타벅스 매장 정보를 가져오는 중입니다...</p>`;\r\n+      \r\n       const latInput = document.getElementById(\"latitude1\").value.trim();\r\n       const lngInput = document.getElementById(\"longitude1\").value.trim();\r\n       if (!latInput || !lngInput) {\r\n-        resultDiv.innerHTML = \"<p class='detail'>위도와 경도를 입력하세요.</p>\";\r\n+        resultDiv.innerHTML = \"<p class='highlight'>위도와 경도를 입력하세요.</p>\";\r\n         return;\r\n       }\r\n+\r\n       const currentLat = parseFloat(latInput);\r\n       const currentLng = parseFloat(lngInput);\r\n       if (isNaN(currentLat) || isNaN(currentLng)) {\r\n-        resultDiv.innerHTML = \"<p class='detail'>유효한 위도와 경도를 입력하세요.</p>\";\r\n+        resultDiv.innerHTML = \"<p class='highlight'>유효한 위도와 경도를 입력하세요.</p>\";\r\n         return;\r\n       }\r\n-      // 업데이트: 입력된 좌표 표시\r\n+\r\n       resultDiv.innerHTML = `<p class=\"detail\">입력된 위치: <span class=\"highlight\">${currentLat.toFixed(5)}, ${currentLng.toFixed(5)}</span></p>\r\n-                             <p class=\"detail loading\">스타벅스 매장 정보를 가져오는 중입니다...</p>`;\r\n-      try {\r\n-        const stores = await fetchStarbucksStoresDirect(currentLat, currentLng);\r\n-        // 응답 도착 시 로딩 메시지를 제거하고 결과로 대체\r\n-        let finalHTML = `<p class=\"detail\">입력된 위치: <span class=\"highlight\">${currentLat.toFixed(5)}, ${currentLng.toFixed(5)}</span></p>`;\r\n-        if (!stores || stores.length === 0) {\r\n-          finalHTML += `<p class=\"detail\">매장 정보를 불러오지 못했습니다.</p>`;\r\n-          resultDiv.innerHTML = finalHTML;\r\n-          return;\r\n-        }\r\n-        const nearestStore = findNearestStore(stores, currentLat, currentLng);\r\n-        if (nearestStore) {\r\n-          finalHTML += `<p class=\"header\">가장 가까운 스타벅스 매장</p>\r\n-                        <p class=\"detail\">매장명: <span class=\"highlight\">${nearestStore.s_name}</span></p>\r\n-                        <p class=\"detail\">주소: <span class=\"highlight\">${nearestStore.addr}</span></p>\r\n-                        <p class=\"detail\">약 <span class=\"highlight\">${nearestStore.distance.toFixed(2)}</span> km 떨어져 있습니다.</p>`;\r\n-        } else {\r\n-          finalHTML += `<p class=\"detail\">좌표 정보를 찾을 수 없는 매장이 있습니다.</p>`;\r\n-        }\r\n-        resultDiv.innerHTML = finalHTML;\r\n-      } catch (error) {\r\n-        resultDiv.innerHTML = `<p class=\"detail\">에러 발생: ${error.message}</p>`;\r\n-      }\r\n+                             <p class=\"loading\">스타벅스 매장 정보를 가져오는 중입니다...</p>`;\r\n+\r\n+      // 스타벅스 API 호출 예제\r\n+      setTimeout(() => {\r\n+        resultDiv.innerHTML = `<p class=\"detail\">입력된 위치: <span class=\"highlight\">${currentLat.toFixed(5)}, ${currentLng.toFixed(5)}</span></p>\r\n+                               <p class=\"highlight\">가장 가까운 스타벅스 매장</p>\r\n+                               <p>매장명: <span class=\"highlight\">광화문우체국</span></p>\r\n+                               <p>주소: 서울특별시 종로구 서린동 154-1 광화문우체국</p>\r\n+                               <p>약 <span class=\"highlight\">0.39 km</span> 떨어져 있습니다.</p>`;\r\n+      }, 2000);\r\n     });\r\n-    \r\n-    /* ===============================\r\n-       [섹션 2] Geolocation + 구 판별 방식 관련\r\n-       - mapping.json과 krDistricts.json 파일 필요 (서버에 존재해야 함)\r\n-    ================================ */\r\n-    let mappingData = {};\r\n-    let districtPolygons = [];\r\n-    \r\n-    async function loadMappingData() {\r\n-      try {\r\n-        const response = await fetch('mapping.json');\r\n-        mappingData = await response.json();\r\n-      } catch (error) {\r\n-        console.error(\"mapping.json 로드 에러:\", error);\r\n-      }\r\n-    }\r\n-    \r\n-    async function loadDistrictPolygons() {\r\n-      try {\r\n-        const response = await fetch('krDistricts.json');\r\n-        const data = await response.json();\r\n-        districtPolygons = data.districtPolygons;\r\n-      } catch (error) {\r\n-        console.error(\"krDistricts.json 로드 에러:\", error);\r\n-      }\r\n-    }\r\n-    \r\n-    function getCurrentLocation() {\r\n-      return new Promise((resolve, reject) => {\r\n-        if (navigator.geolocation) {\r\n-          navigator.geolocation.getCurrentPosition(resolve, reject);\r\n-        } else {\r\n-          reject(new Error(\"Geolocation을 지원하지 않는 브라우저입니다.\"));\r\n-        }\r\n-      });\r\n-    }\r\n-    \r\n-    // Turf.js를 이용해 현재 위치의 구·군 판별\r\n-    function determineDistrict(lat, lng) {\r\n-      const point = turf.point([lng, lat]);\r\n-      for (let district of districtPolygons) {\r\n-        if (turf.booleanPointInPolygon(point, district.polygon)) {\r\n-          return district;\r\n-        }\r\n-      }\r\n-      return null;\r\n-    }\r\n-    \r\n-    async function fetchStarbucksStoresByDistrict(lat, lng, sido_cd, gugun_cd) {\r\n-      const formData = new URLSearchParams();\r\n-      formData.append('ins_lat', lat);\r\n-      formData.append('ins_lng', lng);\r\n-      formData.append('p_sido_cd', sido_cd);\r\n-      formData.append('p_gugun_cd', gugun_cd);\r\n-      formData.append('in_biz_cd', '');\r\n-      formData.append('iend', '2000');\r\n-      formData.append('set_date', '');\r\n-      \r\n-      try {\r\n-        const response = await fetch(\"https://www.starbucks.co.kr/store/getStore.do\", {\r\n-          method: \"POST\",\r\n-          headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n-          body: formData.toString()\r\n-        });\r\n-        const data = await response.json();\r\n-        return data.list;\r\n-      } catch (error) {\r\n-        console.error(\"스타벅스 매장 데이터 요청 에러:\", error);\r\n-        throw error;\r\n-      }\r\n-    }\r\n-    \r\n-    document.getElementById(\"findBtn2\").addEventListener(\"click\", async () => {\r\n-      const resultDiv = document.getElementById(\"result2\");\r\n-      resultDiv.style.display = \"block\";\r\n-      resultDiv.innerHTML = `<p class=\"detail\">데이터를 불러오고 위치를 확인 중입니다...</p>`;\r\n-      try {\r\n-        await loadMappingData();\r\n-        await loadDistrictPolygons();\r\n-        const position = await getCurrentLocation();\r\n-        const currentLat = position.coords.latitude;\r\n-        const currentLng = position.coords.longitude;\r\n-        \r\n-        const district = determineDistrict(currentLat, currentLng);\r\n-        let sido_cd = mappingData.sidoMapping[\"서울\"]; // 기본값: 서울\r\n-        let gugun_cd;\r\n-        let districtMessage;\r\n-        if (district) {\r\n-          gugun_cd = district.code;\r\n-          districtMessage = `현재 위치는 <span class=\"highlight\">${district.name}</span>에 속합니다.`;\r\n-        } else {\r\n-          gugun_cd = \"0119\"; // 기본값: 중구\r\n-          districtMessage = \"현재 위치가 어느 구에도 속하지 않아 기본값(중구)을 사용합니다.\";\r\n-        }\r\n-        \r\n-        let finalHTML = `<p class=\"detail\">현재 좌표: <span class=\"highlight\">${currentLat.toFixed(5)}, ${currentLng.toFixed(5)}</span></p>\r\n-                         <p class=\"detail\">${districtMessage}</p>\r\n-                         <p class=\"detail\">(사용 코드: <span class=\"highlight\">${sido_cd} / ${gugun_cd}</span>)</p>`;\r\n-        finalHTML += `<p class=\"detail\">스타벅스 매장 정보를 가져오는 중입니다...</p>`;\r\n-        resultDiv.innerHTML = finalHTML;\r\n-        \r\n-        const stores = await fetchStarbucksStoresByDistrict(currentLat, currentLng, sido_cd, gugun_cd);\r\n-        if (!stores || stores.length === 0) {\r\n-          finalHTML += `<p class=\"detail\">매장 정보를 불러오지 못했습니다.</p>`;\r\n-          resultDiv.innerHTML = finalHTML;\r\n-          return;\r\n-        }\r\n-        \r\n-        const nearestStore = findNearestStore(stores, currentLat, currentLng);\r\n-        if (nearestStore) {\r\n-          finalHTML += `<p class=\"header\">가장 가까운 스타벅스 매장</p>\r\n-                        <p class=\"detail\">매장명: <span class=\"highlight\">${nearestStore.s_name}</span></p>\r\n-                        <p class=\"detail\">주소: <span class=\"highlight\">${nearestStore.addr}</span></p>\r\n-                        <p class=\"detail\">약 <span class=\"highlight\">${nearestStore.distance.toFixed(2)}</span> km 떨어져 있습니다.</p>`;\r\n-        } else {\r\n-          finalHTML += `<p class=\"detail\">좌표 정보를 찾을 수 없는 매장이 있습니다.</p>`;\r\n-        }\r\n-        resultDiv.innerHTML = finalHTML;\r\n-      } catch (error) {\r\n-        resultDiv.innerHTML = `<p class=\"detail\">에러 발생: ${error.message}</p>`;\r\n-      }\r\n-    });\r\n   </script>\r\n+\r\n </body>\r\n </html>\r\n"
                },
                {
                    "date": 1740102457723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,8 +44,9 @@\n       background: white;\r\n       padding: 20px;\r\n       border-radius: 10px;\r\n       box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);\r\n+      width: fit-content;\r\n     }\r\n     \r\n     /* 예시 리스트 */\r\n     .sample ul {\r\n@@ -105,8 +106,9 @@\n       margin-top: 20px;\r\n       box-shadow: 0px 3px 8px rgba(0, 0, 0, 0.1);\r\n       text-align: left;\r\n       display: none;\r\n+      width: fit-content;\r\n     }\r\n     .result-box p {\r\n       margin: 8px 0;\r\n     }\r\n"
                },
                {
                    "date": 1740102652495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,215 +4,341 @@\n   <meta charset=\"UTF-8\">\r\n   <title>내 위치 기반 스타벅스 매장 찾기 - 통합버전</title>\r\n   <link rel=\"stylesheet\" href=\"style.css\">\r\n   <style>\r\n-    body {\r\n-      font-family: 'Noto Sans KR', Arial, sans-serif;\r\n-      background-color: #f2f0eb;\r\n-      margin: 0;\r\n-      padding: 20px;\r\n-      text-align: center;\r\n-    }\r\n-    h1 {\r\n-      font-size: 26px;\r\n-      font-weight: bold;\r\n-      color: #006241;\r\n-    }\r\n-    p {\r\n-      font-size: 18px;\r\n-      color: #444;\r\n-    }\r\n+    body { font-family: Arial, sans-serif; margin: 20px; }\r\n+    hr { margin: 40px 0; }\r\n+    /* 결과 박스는 기본적으로 감춤 */\r\n+    .result-box { display: none; }\r\n     \r\n-    /* 링크 스타일 */\r\n-    .location-link {\r\n-      display: inline-block;\r\n-      background-color: #006241;\r\n-      color: white;\r\n-      padding: 8px 16px;\r\n-      font-size: 16px;\r\n-      text-decoration: none;\r\n+    /* 예시 좌표 영역 - 카드 형태로 수평 배치 */\r\n+    .sample {\r\n+      margin-top: 10px;\r\n+      background: #f9f9f9;\r\n+      padding: 10px;\r\n+      border: 1px solid #ddd;\r\n       border-radius: 5px;\r\n-      transition: 0.3s;\r\n-      margin-bottom: 15px;\r\n+      display: flex;\r\n+      gap: 10px;\r\n+      justify-content: center;\r\n+      flex-wrap: wrap;\r\n     }\r\n-    .location-link:hover {\r\n-      background-color: #004d32;\r\n-    }\r\n-    \r\n-    /* 예시 좌표 영역 */\r\n-    .sample {\r\n-      margin-top: 20px;\r\n-      background: white;\r\n-      padding: 20px;\r\n-      border-radius: 10px;\r\n-      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);\r\n-      width: fit-content;\r\n-    }\r\n-    \r\n-    /* 예시 리스트 */\r\n     .sample ul {\r\n       display: flex;\r\n       gap: 10px;\r\n       list-style: none;\r\n       padding: 0;\r\n-      justify-content: center;\r\n-      flex-wrap: wrap;\r\n+      margin: 0;\r\n     }\r\n     .sample li {\r\n-      background: #f8f8f8;\r\n-      padding: 15px;\r\n+      border: 1px solid #ccc;\r\n+      padding: 10px;\r\n       border-radius: 8px;\r\n-      width: 200px;\r\n-      box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);\r\n-      text-align: center;\r\n+      width: 180px;\r\n+      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n     }\r\n     .sample li div {\r\n-      font-size: 14px;\r\n-      color: #333;\r\n+      border: none;\r\n       margin: 4px 0;\r\n     }\r\n-    \r\n-    /* 입력창 & 버튼 */\r\n-    input {\r\n-      padding: 10px;\r\n-      font-size: 16px;\r\n-      width: 220px;\r\n-      border: 2px solid #ccc;\r\n-      border-radius: 5px;\r\n-      text-align: center;\r\n-    }\r\n-    input:focus {\r\n-      border-color: #006241;\r\n-    }\r\n-    button {\r\n-      background-color: #006241;\r\n-      color: white;\r\n-      border: none;\r\n-      padding: 12px 18px;\r\n-      font-size: 16px;\r\n-      cursor: pointer;\r\n-      border-radius: 5px;\r\n-      transition: 0.3s;\r\n-      font-weight: bold;\r\n-    }\r\n-    button:hover {\r\n-      background-color: #004d32;\r\n-    }\r\n-    \r\n-    /* 결과 박스 */\r\n-    .result-box {\r\n-      background: white;\r\n-      padding: 20px;\r\n-      border-radius: 10px;\r\n-      margin-top: 20px;\r\n-      box-shadow: 0px 3px 8px rgba(0, 0, 0, 0.1);\r\n-      text-align: left;\r\n-      display: none;\r\n-      width: fit-content;\r\n-    }\r\n-    .result-box p {\r\n-      margin: 8px 0;\r\n-    }\r\n-    .highlight {\r\n-      font-weight: bold;\r\n-      color: #006241;\r\n-    }\r\n-    .loading {\r\n-      color: #d4a373;\r\n-      font-weight: bold;\r\n-    }\r\n   </style>\r\n+  <!-- Turf.js 라이브러리 (CDN) -->\r\n+  <script src=\"https://cdn.jsdelivr.net/npm/@turf/turf@6/turf.min.js\"></script>\r\n </head>\r\n <body>\r\n-  \r\n   <!-- [섹션 1] 직접 입력 방식 -->\r\n   <section id=\"section1\">\r\n     <h1>내 위치에서 가장 가까운 스타벅스 찾기 (직접 입력)</h1>\r\n-    <p>아래 입력란에 위도와 경도를 직접 입력한 후, 버튼을 눌러 해당 위치에서 가장 가까운 스타벅스를 확인합니다.</p>\r\n-\r\n-    <!-- 링크 -->\r\n-    <a href=\"https://jusoga.com/\" target=\"_blank\" class=\"location-link\">📍 위도/경도 찾기 사이트</a>\r\n-\r\n+    <p>\r\n+      아래 입력란에 위도와 경도를 직접 입력한 후, 버튼을 눌러 해당 위치에서 가장 가까운 스타벅스를 확인합니다.\r\n+    </p>\r\n     <!-- 예시 좌표 영역 -->\r\n     <div class=\"sample\">\r\n-      <h2>📌 예시 좌표 목록</h2>\r\n+      <a href=\"https://jusoga.com/\" target=\"_blank\">위도 경도 찾기 사이트</a>\r\n       <ul>\r\n         <li>\r\n-          <strong>남산스퀘어</strong>\r\n-          <div>위도: 37.56165</div>\r\n-          <div>경도: 126.99110</div>\r\n+          <span>남산스퀘어(우리 장소)</span>\r\n+          <div>위도: 37.56165121272</div>\r\n+          <div>경도: 126.99110648606</div>\r\n         </li>\r\n         <li>\r\n-          <strong>성균관대학교(명륜)</strong>\r\n-          <div>위도: 37.58490</div>\r\n-          <div>경도: 126.99694</div>\r\n+          <span>성균관대학교(명륜)</span>\r\n+          <div>위도: 37.584907418709</div>\r\n+          <div>경도: 126.99694886506</div>\r\n         </li>\r\n         <li>\r\n-          <strong>단국대학교(죽전)</strong>\r\n-          <div>위도: 37.32346</div>\r\n-          <div>경도: 127.12558</div>\r\n+          <span>단국대학교(죽전)</span>\r\n+          <div>위도: 37.323468556539</div>\r\n+          <div>경도: 127.12558057358</div>\r\n         </li>\r\n         <li>\r\n-          <strong>부산 해운대구</strong>\r\n-          <div>위도: 35.17674</div>\r\n-          <div>경도: 129.18405</div>\r\n+          <span>부산 해운대구</span>\r\n+          <div>위도: 35.176747504632</div>\r\n+          <div>경도: 129.18405788222</div>\r\n         </li>\r\n       </ul>\r\n     </div>\r\n-\r\n     <div>\r\n       <!-- datalist를 사용하여 추천 옵션 추가 -->\r\n       <input type=\"text\" id=\"latitude1\" placeholder=\"위도 입력 (예: 37.5665)\" list=\"latOptions\">\r\n       <datalist id=\"latOptions\">\r\n-        <option value=\"37.56165\"></option>\r\n-        <option value=\"37.58490\"></option>\r\n-        <option value=\"37.32346\"></option>\r\n-        <option value=\"35.17674\"></option>\r\n+        <option value=\"37.56165121272\"></option>\r\n+        <option value=\"37.584907418709\"></option>\r\n+        <option value=\"37.323468556539\"></option>\r\n+        <option value=\"35.176747504632\"></option>\r\n       </datalist>\r\n       <input type=\"text\" id=\"longitude1\" placeholder=\"경도 입력 (예: 126.9780)\" list=\"lngOptions\">\r\n       <datalist id=\"lngOptions\">\r\n-        <option value=\"126.99110\"></option>\r\n-        <option value=\"126.99694\"></option>\r\n-        <option value=\"127.12558\"></option>\r\n-        <option value=\"129.18405\"></option>\r\n+        <option value=\"126.99110648606\"></option>\r\n+        <option value=\"126.99694886506\"></option>\r\n+        <option value=\"127.12558057358\"></option>\r\n+        <option value=\"129.18405788222\"></option>\r\n       </datalist>\r\n     </div>\r\n     <button id=\"findBtn1\">가장 가까운 스타벅스 찾기</button>\r\n     <div id=\"result1\" class=\"result-box\"></div>\r\n   </section>\r\n-\r\n+  \r\n+  <hr>\r\n+  \r\n+  <!-- [섹션 2] Geolocation + 구 판별 방식 -->\r\n+  <section id=\"section2\">\r\n+    <h1>내 위치 기반 스타벅스 매장 찾기 (구 판별)</h1>\r\n+    <p>\r\n+      현재 위치의 위도/경도만으로 어느 구·군에 있는지 판별한 후, 해당 시도/구군 코드를 사용해 스타벅스 매장 정보를 가져옵니다.\r\n+    </p>\r\n+    <button id=\"findBtn2\">가장 가까운 스타벅스 찾기</button>\r\n+    <div id=\"result2\" class=\"result-box\"></div>\r\n+  </section>\r\n+  \r\n   <script>\r\n+    /* ===============================\r\n+       [공통 함수들]\r\n+    ================================ */\r\n+    function computeDistance(lat1, lon1, lat2, lon2) {\r\n+      const toRad = x => x * Math.PI / 180;\r\n+      const R = 6371; // km\r\n+      const dLat = toRad(lat2 - lat1);\r\n+      const dLon = toRad(lon2 - lon1);\r\n+      const a = Math.sin(dLat/2) ** 2 +\r\n+                Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *\r\n+                Math.sin(dLon/2) ** 2;\r\n+      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n+      return R * c;\r\n+    }\r\n+    \r\n+    function findNearestStore(stores, currentLat, currentLng) {\r\n+      let nearestStore = null;\r\n+      let minDistance = Infinity;\r\n+      stores.forEach(store => {\r\n+        const storeLat = parseFloat(store.lat);\r\n+        const storeLng = store.lng ? parseFloat(store.lng) : parseFloat(store.lot);\r\n+        if (isNaN(storeLat) || isNaN(storeLng)) return;\r\n+        const distance = computeDistance(currentLat, currentLng, storeLat, storeLng);\r\n+        if (distance < minDistance) {\r\n+          minDistance = distance;\r\n+          nearestStore = { ...store, distance };\r\n+        }\r\n+      });\r\n+      return nearestStore;\r\n+    }\r\n+    \r\n+    /* ===============================\r\n+       [섹션 1] 직접 입력 방식 관련\r\n+    ================================ */\r\n+    async function fetchStarbucksStoresDirect(lat, lng) {\r\n+      // 예제에서는 서울(01) / 해운대구(0118) 사용\r\n+      const sido_cd = \"01\";\r\n+      const gugun_cd = \"0118\";\r\n+      const formData = new URLSearchParams();\r\n+      formData.append('ins_lat', lat);\r\n+      formData.append('ins_lng', lng);\r\n+      formData.append('p_sido_cd', sido_cd);\r\n+      formData.append('p_gugun_cd', gugun_cd);\r\n+      formData.append('in_biz_cd', '');\r\n+      formData.append('iend', '2000');\r\n+      formData.append('set_date', '');\r\n+      \r\n+      try {\r\n+        const response = await fetch(\"https://www.starbucks.co.kr/store/getStore.do\", {\r\n+          method: \"POST\",\r\n+          headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n+          body: formData.toString()\r\n+        });\r\n+        const data = await response.json();\r\n+        return data.list;\r\n+      } catch (error) {\r\n+        console.error(\"스타벅스 매장 데이터 요청 에러:\", error);\r\n+        throw error;\r\n+      }\r\n+    }\r\n+    \r\n     document.getElementById(\"findBtn1\").addEventListener(\"click\", async () => {\r\n       const resultDiv = document.getElementById(\"result1\");\r\n+      // 결과 영역 보이기\r\n       resultDiv.style.display = \"block\";\r\n-      resultDiv.innerHTML = `<p class=\"loading\">스타벅스 매장 정보를 가져오는 중입니다...</p>`;\r\n-      \r\n+      // 먼저 로딩 메시지 출력\r\n+      resultDiv.innerHTML = `<p class=\"detail\">입력된 위치: <span class=\"highlight\">--, --</span></p>\r\n+                             <p class=\"detail loading\">스타벅스 매장 정보를 가져오는 중입니다...</p>`;\r\n       const latInput = document.getElementById(\"latitude1\").value.trim();\r\n       const lngInput = document.getElementById(\"longitude1\").value.trim();\r\n       if (!latInput || !lngInput) {\r\n-        resultDiv.innerHTML = \"<p class='highlight'>위도와 경도를 입력하세요.</p>\";\r\n+        resultDiv.innerHTML = \"<p class='detail'>위도와 경도를 입력하세요.</p>\";\r\n         return;\r\n       }\r\n-\r\n       const currentLat = parseFloat(latInput);\r\n       const currentLng = parseFloat(lngInput);\r\n       if (isNaN(currentLat) || isNaN(currentLng)) {\r\n-        resultDiv.innerHTML = \"<p class='highlight'>유효한 위도와 경도를 입력하세요.</p>\";\r\n+        resultDiv.innerHTML = \"<p class='detail'>유효한 위도와 경도를 입력하세요.</p>\";\r\n         return;\r\n       }\r\n-\r\n+      // 업데이트: 입력된 좌표 표시\r\n       resultDiv.innerHTML = `<p class=\"detail\">입력된 위치: <span class=\"highlight\">${currentLat.toFixed(5)}, ${currentLng.toFixed(5)}</span></p>\r\n-                             <p class=\"loading\">스타벅스 매장 정보를 가져오는 중입니다...</p>`;\r\n-\r\n-      // 스타벅스 API 호출 예제\r\n-      setTimeout(() => {\r\n-        resultDiv.innerHTML = `<p class=\"detail\">입력된 위치: <span class=\"highlight\">${currentLat.toFixed(5)}, ${currentLng.toFixed(5)}</span></p>\r\n-                               <p class=\"highlight\">가장 가까운 스타벅스 매장</p>\r\n-                               <p>매장명: <span class=\"highlight\">광화문우체국</span></p>\r\n-                               <p>주소: 서울특별시 종로구 서린동 154-1 광화문우체국</p>\r\n-                               <p>약 <span class=\"highlight\">0.39 km</span> 떨어져 있습니다.</p>`;\r\n-      }, 2000);\r\n+                             <p class=\"detail loading\">스타벅스 매장 정보를 가져오는 중입니다...</p>`;\r\n+      try {\r\n+        const stores = await fetchStarbucksStoresDirect(currentLat, currentLng);\r\n+        // 응답 도착 시 로딩 메시지를 제거하고 결과로 대체\r\n+        let finalHTML = `<p class=\"detail\">입력된 위치: <span class=\"highlight\">${currentLat.toFixed(5)}, ${currentLng.toFixed(5)}</span></p>`;\r\n+        if (!stores || stores.length === 0) {\r\n+          finalHTML += `<p class=\"detail\">매장 정보를 불러오지 못했습니다.</p>`;\r\n+          resultDiv.innerHTML = finalHTML;\r\n+          return;\r\n+        }\r\n+        const nearestStore = findNearestStore(stores, currentLat, currentLng);\r\n+        if (nearestStore) {\r\n+          finalHTML += `<p class=\"header\">가장 가까운 스타벅스 매장</p>\r\n+                        <p class=\"detail\">매장명: <span class=\"highlight\">${nearestStore.s_name}</span></p>\r\n+                        <p class=\"detail\">주소: <span class=\"highlight\">${nearestStore.addr}</span></p>\r\n+                        <p class=\"detail\">약 <span class=\"highlight\">${nearestStore.distance.toFixed(2)}</span> km 떨어져 있습니다.</p>`;\r\n+        } else {\r\n+          finalHTML += `<p class=\"detail\">좌표 정보를 찾을 수 없는 매장이 있습니다.</p>`;\r\n+        }\r\n+        resultDiv.innerHTML = finalHTML;\r\n+      } catch (error) {\r\n+        resultDiv.innerHTML = `<p class=\"detail\">에러 발생: ${error.message}</p>`;\r\n+      }\r\n     });\r\n+    \r\n+    /* ===============================\r\n+       [섹션 2] Geolocation + 구 판별 방식 관련\r\n+       - mapping.json과 krDistricts.json 파일 필요 (서버에 존재해야 함)\r\n+    ================================ */\r\n+    let mappingData = {};\r\n+    let districtPolygons = [];\r\n+    \r\n+    async function loadMappingData() {\r\n+      try {\r\n+        const response = await fetch('mapping.json');\r\n+        mappingData = await response.json();\r\n+      } catch (error) {\r\n+        console.error(\"mapping.json 로드 에러:\", error);\r\n+      }\r\n+    }\r\n+    \r\n+    async function loadDistrictPolygons() {\r\n+      try {\r\n+        const response = await fetch('krDistricts.json');\r\n+        const data = await response.json();\r\n+        districtPolygons = data.districtPolygons;\r\n+      } catch (error) {\r\n+        console.error(\"krDistricts.json 로드 에러:\", error);\r\n+      }\r\n+    }\r\n+    \r\n+    function getCurrentLocation() {\r\n+      return new Promise((resolve, reject) => {\r\n+        if (navigator.geolocation) {\r\n+          navigator.geolocation.getCurrentPosition(resolve, reject);\r\n+        } else {\r\n+          reject(new Error(\"Geolocation을 지원하지 않는 브라우저입니다.\"));\r\n+        }\r\n+      });\r\n+    }\r\n+    \r\n+    // Turf.js를 이용해 현재 위치의 구·군 판별\r\n+    function determineDistrict(lat, lng) {\r\n+      const point = turf.point([lng, lat]);\r\n+      for (let district of districtPolygons) {\r\n+        if (turf.booleanPointInPolygon(point, district.polygon)) {\r\n+          return district;\r\n+        }\r\n+      }\r\n+      return null;\r\n+    }\r\n+    \r\n+    async function fetchStarbucksStoresByDistrict(lat, lng, sido_cd, gugun_cd) {\r\n+      const formData = new URLSearchParams();\r\n+      formData.append('ins_lat', lat);\r\n+      formData.append('ins_lng', lng);\r\n+      formData.append('p_sido_cd', sido_cd);\r\n+      formData.append('p_gugun_cd', gugun_cd);\r\n+      formData.append('in_biz_cd', '');\r\n+      formData.append('iend', '2000');\r\n+      formData.append('set_date', '');\r\n+      \r\n+      try {\r\n+        const response = await fetch(\"https://www.starbucks.co.kr/store/getStore.do\", {\r\n+          method: \"POST\",\r\n+          headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n+          body: formData.toString()\r\n+        });\r\n+        const data = await response.json();\r\n+        return data.list;\r\n+      } catch (error) {\r\n+        console.error(\"스타벅스 매장 데이터 요청 에러:\", error);\r\n+        throw error;\r\n+      }\r\n+    }\r\n+    \r\n+    document.getElementById(\"findBtn2\").addEventListener(\"click\", async () => {\r\n+      const resultDiv = document.getElementById(\"result2\");\r\n+      resultDiv.style.display = \"block\";\r\n+      resultDiv.innerHTML = `<p class=\"detail\">데이터를 불러오고 위치를 확인 중입니다...</p>`;\r\n+      try {\r\n+        await loadMappingData();\r\n+        await loadDistrictPolygons();\r\n+        const position = await getCurrentLocation();\r\n+        const currentLat = position.coords.latitude;\r\n+        const currentLng = position.coords.longitude;\r\n+        \r\n+        const district = determineDistrict(currentLat, currentLng);\r\n+        let sido_cd = mappingData.sidoMapping[\"서울\"]; // 기본값: 서울\r\n+        let gugun_cd;\r\n+        let districtMessage;\r\n+        if (district) {\r\n+          gugun_cd = district.code;\r\n+          districtMessage = `현재 위치는 <span class=\"highlight\">${district.name}</span>에 속합니다.`;\r\n+        } else {\r\n+          gugun_cd = \"0119\"; // 기본값: 중구\r\n+          districtMessage = \"현재 위치가 어느 구에도 속하지 않아 기본값(중구)을 사용합니다.\";\r\n+        }\r\n+        \r\n+        let finalHTML = `<p class=\"detail\">현재 좌표: <span class=\"highlight\">${currentLat.toFixed(5)}, ${currentLng.toFixed(5)}</span></p>\r\n+                         <p class=\"detail\">${districtMessage}</p>\r\n+                         <p class=\"detail\">(사용 코드: <span class=\"highlight\">${sido_cd} / ${gugun_cd}</span>)</p>`;\r\n+        finalHTML += `<p class=\"detail\">스타벅스 매장 정보를 가져오는 중입니다...</p>`;\r\n+        resultDiv.innerHTML = finalHTML;\r\n+        \r\n+        const stores = await fetchStarbucksStoresByDistrict(currentLat, currentLng, sido_cd, gugun_cd);\r\n+        if (!stores || stores.length === 0) {\r\n+          finalHTML += `<p class=\"detail\">매장 정보를 불러오지 못했습니다.</p>`;\r\n+          resultDiv.innerHTML = finalHTML;\r\n+          return;\r\n+        }\r\n+        \r\n+        const nearestStore = findNearestStore(stores, currentLat, currentLng);\r\n+        if (nearestStore) {\r\n+          finalHTML += `<p class=\"header\">가장 가까운 스타벅스 매장</p>\r\n+                        <p class=\"detail\">매장명: <span class=\"highlight\">${nearestStore.s_name}</span></p>\r\n+                        <p class=\"detail\">주소: <span class=\"highlight\">${nearestStore.addr}</span></p>\r\n+                        <p class=\"detail\">약 <span class=\"highlight\">${nearestStore.distance.toFixed(2)}</span> km 떨어져 있습니다.</p>`;\r\n+        } else {\r\n+          finalHTML += `<p class=\"detail\">좌표 정보를 찾을 수 없는 매장이 있습니다.</p>`;\r\n+        }\r\n+        resultDiv.innerHTML = finalHTML;\r\n+      } catch (error) {\r\n+        resultDiv.innerHTML = `<p class=\"detail\">에러 발생: ${error.message}</p>`;\r\n+      }\r\n+    });\r\n   </script>\r\n-\r\n </body>\r\n </html>\r\n"
                },
                {
                    "date": 1740102671972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n <html lang=\"ko\">\r\n <head>\r\n   <meta charset=\"UTF-8\">\r\n   <title>내 위치 기반 스타벅스 매장 찾기 - 통합버전</title>\r\n-  <link rel=\"stylesheet\" href=\"style.css\">\r\n+  <link rel=\"stylesheet\" href=\"./css/style.css\">\r\n   <style>\r\n     body { font-family: Arial, sans-serif; margin: 20px; }\r\n     hr { margin: 40px 0; }\r\n     /* 결과 박스는 기본적으로 감춤 */\r\n"
                },
                {
                    "date": 1740102914455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,343 +2,215 @@\n <html lang=\"ko\">\r\n <head>\r\n   <meta charset=\"UTF-8\">\r\n   <title>내 위치 기반 스타벅스 매장 찾기 - 통합버전</title>\r\n-  <link rel=\"stylesheet\" href=\"./css/style.css\">\r\n+  <link rel=\"stylesheet\" href=\"style.css\">\r\n   <style>\r\n-    body { font-family: Arial, sans-serif; margin: 20px; }\r\n-    hr { margin: 40px 0; }\r\n-    /* 결과 박스는 기본적으로 감춤 */\r\n-    .result-box { display: none; }\r\n+    body {\r\n+      font-family: 'Noto Sans KR', Arial, sans-serif;\r\n+      background-color: #f2f0eb;\r\n+      margin: 0;\r\n+      padding: 20px;\r\n+      text-align: center;\r\n+    }\r\n+    h1 {\r\n+      font-size: 26px;\r\n+      font-weight: bold;\r\n+      color: #006241;\r\n+    }\r\n+    p {\r\n+      font-size: 18px;\r\n+      color: #444;\r\n+    }\r\n     \r\n-    /* 예시 좌표 영역 - 카드 형태로 수평 배치 */\r\n-    .sample {\r\n-      margin-top: 10px;\r\n-      background: #f9f9f9;\r\n-      padding: 10px;\r\n-      border: 1px solid #ddd;\r\n+    /* 링크 스타일 */\r\n+    .location-link {\r\n+      display: inline-block;\r\n+      background-color: #006241;\r\n+      color: white;\r\n+      padding: 8px 16px;\r\n+      font-size: 16px;\r\n+      text-decoration: none;\r\n       border-radius: 5px;\r\n-      display: flex;\r\n-      gap: 10px;\r\n-      justify-content: center;\r\n-      flex-wrap: wrap;\r\n+      transition: 0.3s;\r\n+      margin-bottom: 15px;\r\n     }\r\n+    .location-link:hover {\r\n+      background-color: #004d32;\r\n+    }\r\n+    \r\n+    /* 예시 좌표 영역 */\r\n+    .sample {\r\n+      margin-top: 20px;\r\n+      background: white;\r\n+      padding: 20px;\r\n+      border-radius: 10px;\r\n+      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);\r\n+    }\r\n+    \r\n+    /* 예시 리스트 */\r\n     .sample ul {\r\n       display: flex;\r\n       gap: 10px;\r\n       list-style: none;\r\n       padding: 0;\r\n-      margin: 0;\r\n+      justify-content: center;\r\n+      flex-wrap: wrap;\r\n     }\r\n     .sample li {\r\n-      border: 1px solid #ccc;\r\n-      padding: 10px;\r\n+      background: #f8f8f8;\r\n+      padding: 15px;\r\n       border-radius: 8px;\r\n-      width: 180px;\r\n-      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n+      width: 200px;\r\n+      box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);\r\n+      text-align: center;\r\n     }\r\n     .sample li div {\r\n-      border: none;\r\n+      font-size: 14px;\r\n+      color: #333;\r\n       margin: 4px 0;\r\n     }\r\n+    \r\n+    /* 입력창 & 버튼 */\r\n+    input {\r\n+      padding: 10px;\r\n+      font-size: 16px;\r\n+      width: 220px;\r\n+      border: 2px solid #ccc;\r\n+      border-radius: 5px;\r\n+      text-align: center;\r\n+    }\r\n+    input:focus {\r\n+      border-color: #006241;\r\n+    }\r\n+    button {\r\n+      background-color: #006241;\r\n+      color: white;\r\n+      border: none;\r\n+      padding: 12px 18px;\r\n+      font-size: 16px;\r\n+      cursor: pointer;\r\n+      border-radius: 5px;\r\n+      transition: 0.3s;\r\n+      font-weight: bold;\r\n+    }\r\n+    button:hover {\r\n+      background-color: #004d32;\r\n+    }\r\n+    \r\n+    /* 결과 박스 */\r\n+    .result-box {\r\n+      background: white;\r\n+      padding: 20px;\r\n+      border-radius: 10px;\r\n+      margin-top: 20px;\r\n+      box-shadow: 0px 3px 8px rgba(0, 0, 0, 0.1);\r\n+      text-align: left;\r\n+      display: none;\r\n+    }\r\n+    .result-box p {\r\n+      margin: 8px 0;\r\n+    }\r\n+    .highlight {\r\n+      font-weight: bold;\r\n+      color: #006241;\r\n+    }\r\n+    .loading {\r\n+      color: #d4a373;\r\n+      font-weight: bold;\r\n+    }\r\n   </style>\r\n-  <!-- Turf.js 라이브러리 (CDN) -->\r\n-  <script src=\"https://cdn.jsdelivr.net/npm/@turf/turf@6/turf.min.js\"></script>\r\n </head>\r\n <body>\r\n+  \r\n   <!-- [섹션 1] 직접 입력 방식 -->\r\n   <section id=\"section1\">\r\n-    <h1>내 위치에서 가장 가까운 스타벅스 찾기 (직접 입력)</h1>\r\n-    <p>\r\n-      아래 입력란에 위도와 경도를 직접 입력한 후, 버튼을 눌러 해당 위치에서 가장 가까운 스타벅스를 확인합니다.\r\n-    </p>\r\n+    <h1>내 위치 기반 스타벅스 매장 찾기 (직접 입력)</h1>\r\n+    <p>아래 입력란에 위도와 경도를 직접 입력한 후, 버튼을 눌러 해당 위치에서 가장 가까운 스타벅스를 확인합니다.</p>\r\n+\r\n+    <!-- 링크 -->\r\n+    <a href=\"https://jusoga.com/\" target=\"_blank\" class=\"location-link\">📍 위도/경도 찾기 사이트</a>\r\n+\r\n     <!-- 예시 좌표 영역 -->\r\n     <div class=\"sample\">\r\n-      <a href=\"https://jusoga.com/\" target=\"_blank\">위도 경도 찾기 사이트</a>\r\n+      <h2>📌 예시 좌표 목록</h2>\r\n       <ul>\r\n         <li>\r\n-          <span>남산스퀘어(우리 장소)</span>\r\n-          <div>위도: 37.56165121272</div>\r\n-          <div>경도: 126.99110648606</div>\r\n+          <strong>남산스퀘어</strong>\r\n+          <div>위도: 37.56165</div>\r\n+          <div>경도: 126.99110</div>\r\n         </li>\r\n         <li>\r\n-          <span>성균관대학교(명륜)</span>\r\n-          <div>위도: 37.584907418709</div>\r\n-          <div>경도: 126.99694886506</div>\r\n+          <strong>성균관대학교(명륜)</strong>\r\n+          <div>위도: 37.58490</div>\r\n+          <div>경도: 126.99694</div>\r\n         </li>\r\n         <li>\r\n-          <span>단국대학교(죽전)</span>\r\n-          <div>위도: 37.323468556539</div>\r\n-          <div>경도: 127.12558057358</div>\r\n+          <strong>단국대학교(죽전)</strong>\r\n+          <div>위도: 37.32346</div>\r\n+          <div>경도: 127.12558</div>\r\n         </li>\r\n         <li>\r\n-          <span>부산 해운대구</span>\r\n-          <div>위도: 35.176747504632</div>\r\n-          <div>경도: 129.18405788222</div>\r\n+          <strong>부산 해운대구</strong>\r\n+          <div>위도: 35.17674</div>\r\n+          <div>경도: 129.18405</div>\r\n         </li>\r\n       </ul>\r\n     </div>\r\n+\r\n     <div>\r\n       <!-- datalist를 사용하여 추천 옵션 추가 -->\r\n       <input type=\"text\" id=\"latitude1\" placeholder=\"위도 입력 (예: 37.5665)\" list=\"latOptions\">\r\n       <datalist id=\"latOptions\">\r\n-        <option value=\"37.56165121272\"></option>\r\n-        <option value=\"37.584907418709\"></option>\r\n-        <option value=\"37.323468556539\"></option>\r\n-        <option value=\"35.176747504632\"></option>\r\n+        <option value=\"37.56165\"></option>\r\n+        <option value=\"37.58490\"></option>\r\n+        <option value=\"37.32346\"></option>\r\n+        <option value=\"35.17674\"></option>\r\n       </datalist>\r\n       <input type=\"text\" id=\"longitude1\" placeholder=\"경도 입력 (예: 126.9780)\" list=\"lngOptions\">\r\n       <datalist id=\"lngOptions\">\r\n-        <option value=\"126.99110648606\"></option>\r\n-        <option value=\"126.99694886506\"></option>\r\n-        <option value=\"127.12558057358\"></option>\r\n-        <option value=\"129.18405788222\"></option>\r\n+        <option value=\"126.99110\"></option>\r\n+        <option value=\"126.99694\"></option>\r\n+        <option value=\"127.12558\"></option>\r\n+        <option value=\"129.18405\"></option>\r\n       </datalist>\r\n     </div>\r\n     <button id=\"findBtn1\">가장 가까운 스타벅스 찾기</button>\r\n     <div id=\"result1\" class=\"result-box\"></div>\r\n   </section>\r\n-  \r\n-  <hr>\r\n-  \r\n-  <!-- [섹션 2] Geolocation + 구 판별 방식 -->\r\n-  <section id=\"section2\">\r\n-    <h1>내 위치 기반 스타벅스 매장 찾기 (구 판별)</h1>\r\n-    <p>\r\n-      현재 위치의 위도/경도만으로 어느 구·군에 있는지 판별한 후, 해당 시도/구군 코드를 사용해 스타벅스 매장 정보를 가져옵니다.\r\n-    </p>\r\n-    <button id=\"findBtn2\">가장 가까운 스타벅스 찾기</button>\r\n-    <div id=\"result2\" class=\"result-box\"></div>\r\n-  </section>\r\n-  \r\n+\r\n   <script>\r\n-    /* ===============================\r\n-       [공통 함수들]\r\n-    ================================ */\r\n-    function computeDistance(lat1, lon1, lat2, lon2) {\r\n-      const toRad = x => x * Math.PI / 180;\r\n-      const R = 6371; // km\r\n-      const dLat = toRad(lat2 - lat1);\r\n-      const dLon = toRad(lon2 - lon1);\r\n-      const a = Math.sin(dLat/2) ** 2 +\r\n-                Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *\r\n-                Math.sin(dLon/2) ** 2;\r\n-      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n-      return R * c;\r\n-    }\r\n-    \r\n-    function findNearestStore(stores, currentLat, currentLng) {\r\n-      let nearestStore = null;\r\n-      let minDistance = Infinity;\r\n-      stores.forEach(store => {\r\n-        const storeLat = parseFloat(store.lat);\r\n-        const storeLng = store.lng ? parseFloat(store.lng) : parseFloat(store.lot);\r\n-        if (isNaN(storeLat) || isNaN(storeLng)) return;\r\n-        const distance = computeDistance(currentLat, currentLng, storeLat, storeLng);\r\n-        if (distance < minDistance) {\r\n-          minDistance = distance;\r\n-          nearestStore = { ...store, distance };\r\n-        }\r\n-      });\r\n-      return nearestStore;\r\n-    }\r\n-    \r\n-    /* ===============================\r\n-       [섹션 1] 직접 입력 방식 관련\r\n-    ================================ */\r\n-    async function fetchStarbucksStoresDirect(lat, lng) {\r\n-      // 예제에서는 서울(01) / 해운대구(0118) 사용\r\n-      const sido_cd = \"01\";\r\n-      const gugun_cd = \"0118\";\r\n-      const formData = new URLSearchParams();\r\n-      formData.append('ins_lat', lat);\r\n-      formData.append('ins_lng', lng);\r\n-      formData.append('p_sido_cd', sido_cd);\r\n-      formData.append('p_gugun_cd', gugun_cd);\r\n-      formData.append('in_biz_cd', '');\r\n-      formData.append('iend', '2000');\r\n-      formData.append('set_date', '');\r\n-      \r\n-      try {\r\n-        const response = await fetch(\"https://www.starbucks.co.kr/store/getStore.do\", {\r\n-          method: \"POST\",\r\n-          headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n-          body: formData.toString()\r\n-        });\r\n-        const data = await response.json();\r\n-        return data.list;\r\n-      } catch (error) {\r\n-        console.error(\"스타벅스 매장 데이터 요청 에러:\", error);\r\n-        throw error;\r\n-      }\r\n-    }\r\n-    \r\n     document.getElementById(\"findBtn1\").addEventListener(\"click\", async () => {\r\n       const resultDiv = document.getElementById(\"result1\");\r\n-      // 결과 영역 보이기\r\n       resultDiv.style.display = \"block\";\r\n-      // 먼저 로딩 메시지 출력\r\n-      resultDiv.innerHTML = `<p class=\"detail\">입력된 위치: <span class=\"highlight\">--, --</span></p>\r\n-                             <p class=\"detail loading\">스타벅스 매장 정보를 가져오는 중입니다...</p>`;\r\n+      resultDiv.innerHTML = `<p class=\"loading\">스타벅스 매장 정보를 가져오는 중입니다...</p>`;\r\n+      \r\n       const latInput = document.getElementById(\"latitude1\").value.trim();\r\n       const lngInput = document.getElementById(\"longitude1\").value.trim();\r\n       if (!latInput || !lngInput) {\r\n-        resultDiv.innerHTML = \"<p class='detail'>위도와 경도를 입력하세요.</p>\";\r\n+        resultDiv.innerHTML = \"<p class='highlight'>위도와 경도를 입력하세요.</p>\";\r\n         return;\r\n       }\r\n+\r\n       const currentLat = parseFloat(latInput);\r\n       const currentLng = parseFloat(lngInput);\r\n       if (isNaN(currentLat) || isNaN(currentLng)) {\r\n-        resultDiv.innerHTML = \"<p class='detail'>유효한 위도와 경도를 입력하세요.</p>\";\r\n+        resultDiv.innerHTML = \"<p class='highlight'>유효한 위도와 경도를 입력하세요.</p>\";\r\n         return;\r\n       }\r\n-      // 업데이트: 입력된 좌표 표시\r\n+\r\n       resultDiv.innerHTML = `<p class=\"detail\">입력된 위치: <span class=\"highlight\">${currentLat.toFixed(5)}, ${currentLng.toFixed(5)}</span></p>\r\n-                             <p class=\"detail loading\">스타벅스 매장 정보를 가져오는 중입니다...</p>`;\r\n-      try {\r\n-        const stores = await fetchStarbucksStoresDirect(currentLat, currentLng);\r\n-        // 응답 도착 시 로딩 메시지를 제거하고 결과로 대체\r\n-        let finalHTML = `<p class=\"detail\">입력된 위치: <span class=\"highlight\">${currentLat.toFixed(5)}, ${currentLng.toFixed(5)}</span></p>`;\r\n-        if (!stores || stores.length === 0) {\r\n-          finalHTML += `<p class=\"detail\">매장 정보를 불러오지 못했습니다.</p>`;\r\n-          resultDiv.innerHTML = finalHTML;\r\n-          return;\r\n-        }\r\n-        const nearestStore = findNearestStore(stores, currentLat, currentLng);\r\n-        if (nearestStore) {\r\n-          finalHTML += `<p class=\"header\">가장 가까운 스타벅스 매장</p>\r\n-                        <p class=\"detail\">매장명: <span class=\"highlight\">${nearestStore.s_name}</span></p>\r\n-                        <p class=\"detail\">주소: <span class=\"highlight\">${nearestStore.addr}</span></p>\r\n-                        <p class=\"detail\">약 <span class=\"highlight\">${nearestStore.distance.toFixed(2)}</span> km 떨어져 있습니다.</p>`;\r\n-        } else {\r\n-          finalHTML += `<p class=\"detail\">좌표 정보를 찾을 수 없는 매장이 있습니다.</p>`;\r\n-        }\r\n-        resultDiv.innerHTML = finalHTML;\r\n-      } catch (error) {\r\n-        resultDiv.innerHTML = `<p class=\"detail\">에러 발생: ${error.message}</p>`;\r\n-      }\r\n+                             <p class=\"loading\">스타벅스 매장 정보를 가져오는 중입니다...</p>`;\r\n+\r\n+      // 스타벅스 API 호출 예제\r\n+      setTimeout(() => {\r\n+        resultDiv.innerHTML = `<p class=\"detail\">입력된 위치: <span class=\"highlight\">${currentLat.toFixed(5)}, ${currentLng.toFixed(5)}</span></p>\r\n+                               <p class=\"highlight\">가장 가까운 스타벅스 매장</p>\r\n+                               <p>매장명: <span class=\"highlight\">광화문우체국</span></p>\r\n+                               <p>주소: 서울특별시 종로구 서린동 154-1 광화문우체국</p>\r\n+                               <p>약 <span class=\"highlight\">0.39 km</span> 떨어져 있습니다.</p>`;\r\n+      }, 2000);\r\n     });\r\n-    \r\n-    /* ===============================\r\n-       [섹션 2] Geolocation + 구 판별 방식 관련\r\n-       - mapping.json과 krDistricts.json 파일 필요 (서버에 존재해야 함)\r\n-    ================================ */\r\n-    let mappingData = {};\r\n-    let districtPolygons = [];\r\n-    \r\n-    async function loadMappingData() {\r\n-      try {\r\n-        const response = await fetch('mapping.json');\r\n-        mappingData = await response.json();\r\n-      } catch (error) {\r\n-        console.error(\"mapping.json 로드 에러:\", error);\r\n-      }\r\n-    }\r\n-    \r\n-    async function loadDistrictPolygons() {\r\n-      try {\r\n-        const response = await fetch('krDistricts.json');\r\n-        const data = await response.json();\r\n-        districtPolygons = data.districtPolygons;\r\n-      } catch (error) {\r\n-        console.error(\"krDistricts.json 로드 에러:\", error);\r\n-      }\r\n-    }\r\n-    \r\n-    function getCurrentLocation() {\r\n-      return new Promise((resolve, reject) => {\r\n-        if (navigator.geolocation) {\r\n-          navigator.geolocation.getCurrentPosition(resolve, reject);\r\n-        } else {\r\n-          reject(new Error(\"Geolocation을 지원하지 않는 브라우저입니다.\"));\r\n-        }\r\n-      });\r\n-    }\r\n-    \r\n-    // Turf.js를 이용해 현재 위치의 구·군 판별\r\n-    function determineDistrict(lat, lng) {\r\n-      const point = turf.point([lng, lat]);\r\n-      for (let district of districtPolygons) {\r\n-        if (turf.booleanPointInPolygon(point, district.polygon)) {\r\n-          return district;\r\n-        }\r\n-      }\r\n-      return null;\r\n-    }\r\n-    \r\n-    async function fetchStarbucksStoresByDistrict(lat, lng, sido_cd, gugun_cd) {\r\n-      const formData = new URLSearchParams();\r\n-      formData.append('ins_lat', lat);\r\n-      formData.append('ins_lng', lng);\r\n-      formData.append('p_sido_cd', sido_cd);\r\n-      formData.append('p_gugun_cd', gugun_cd);\r\n-      formData.append('in_biz_cd', '');\r\n-      formData.append('iend', '2000');\r\n-      formData.append('set_date', '');\r\n-      \r\n-      try {\r\n-        const response = await fetch(\"https://www.starbucks.co.kr/store/getStore.do\", {\r\n-          method: \"POST\",\r\n-          headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n-          body: formData.toString()\r\n-        });\r\n-        const data = await response.json();\r\n-        return data.list;\r\n-      } catch (error) {\r\n-        console.error(\"스타벅스 매장 데이터 요청 에러:\", error);\r\n-        throw error;\r\n-      }\r\n-    }\r\n-    \r\n-    document.getElementById(\"findBtn2\").addEventListener(\"click\", async () => {\r\n-      const resultDiv = document.getElementById(\"result2\");\r\n-      resultDiv.style.display = \"block\";\r\n-      resultDiv.innerHTML = `<p class=\"detail\">데이터를 불러오고 위치를 확인 중입니다...</p>`;\r\n-      try {\r\n-        await loadMappingData();\r\n-        await loadDistrictPolygons();\r\n-        const position = await getCurrentLocation();\r\n-        const currentLat = position.coords.latitude;\r\n-        const currentLng = position.coords.longitude;\r\n-        \r\n-        const district = determineDistrict(currentLat, currentLng);\r\n-        let sido_cd = mappingData.sidoMapping[\"서울\"]; // 기본값: 서울\r\n-        let gugun_cd;\r\n-        let districtMessage;\r\n-        if (district) {\r\n-          gugun_cd = district.code;\r\n-          districtMessage = `현재 위치는 <span class=\"highlight\">${district.name}</span>에 속합니다.`;\r\n-        } else {\r\n-          gugun_cd = \"0119\"; // 기본값: 중구\r\n-          districtMessage = \"현재 위치가 어느 구에도 속하지 않아 기본값(중구)을 사용합니다.\";\r\n-        }\r\n-        \r\n-        let finalHTML = `<p class=\"detail\">현재 좌표: <span class=\"highlight\">${currentLat.toFixed(5)}, ${currentLng.toFixed(5)}</span></p>\r\n-                         <p class=\"detail\">${districtMessage}</p>\r\n-                         <p class=\"detail\">(사용 코드: <span class=\"highlight\">${sido_cd} / ${gugun_cd}</span>)</p>`;\r\n-        finalHTML += `<p class=\"detail\">스타벅스 매장 정보를 가져오는 중입니다...</p>`;\r\n-        resultDiv.innerHTML = finalHTML;\r\n-        \r\n-        const stores = await fetchStarbucksStoresByDistrict(currentLat, currentLng, sido_cd, gugun_cd);\r\n-        if (!stores || stores.length === 0) {\r\n-          finalHTML += `<p class=\"detail\">매장 정보를 불러오지 못했습니다.</p>`;\r\n-          resultDiv.innerHTML = finalHTML;\r\n-          return;\r\n-        }\r\n-        \r\n-        const nearestStore = findNearestStore(stores, currentLat, currentLng);\r\n-        if (nearestStore) {\r\n-          finalHTML += `<p class=\"header\">가장 가까운 스타벅스 매장</p>\r\n-                        <p class=\"detail\">매장명: <span class=\"highlight\">${nearestStore.s_name}</span></p>\r\n-                        <p class=\"detail\">주소: <span class=\"highlight\">${nearestStore.addr}</span></p>\r\n-                        <p class=\"detail\">약 <span class=\"highlight\">${nearestStore.distance.toFixed(2)}</span> km 떨어져 있습니다.</p>`;\r\n-        } else {\r\n-          finalHTML += `<p class=\"detail\">좌표 정보를 찾을 수 없는 매장이 있습니다.</p>`;\r\n-        }\r\n-        resultDiv.innerHTML = finalHTML;\r\n-      } catch (error) {\r\n-        resultDiv.innerHTML = `<p class=\"detail\">에러 발생: ${error.message}</p>`;\r\n-      }\r\n-    });\r\n   </script>\r\n+\r\n </body>\r\n </html>\r\n"
                },
                {
                    "date": 1740103299240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,213 +4,341 @@\n   <meta charset=\"UTF-8\">\r\n   <title>내 위치 기반 스타벅스 매장 찾기 - 통합버전</title>\r\n   <link rel=\"stylesheet\" href=\"style.css\">\r\n   <style>\r\n-    body {\r\n-      font-family: 'Noto Sans KR', Arial, sans-serif;\r\n-      background-color: #f2f0eb;\r\n-      margin: 0;\r\n-      padding: 20px;\r\n-      text-align: center;\r\n-    }\r\n-    h1 {\r\n-      font-size: 26px;\r\n-      font-weight: bold;\r\n-      color: #006241;\r\n-    }\r\n-    p {\r\n-      font-size: 18px;\r\n-      color: #444;\r\n-    }\r\n+    body { font-family: Arial, sans-serif; margin: 20px; }\r\n+    hr { margin: 40px 0; }\r\n+    /* 결과 박스는 기본적으로 감춤 */\r\n+    .result-box { display: none; }\r\n     \r\n-    /* 링크 스타일 */\r\n-    .location-link {\r\n-      display: inline-block;\r\n-      background-color: #006241;\r\n-      color: white;\r\n-      padding: 8px 16px;\r\n-      font-size: 16px;\r\n-      text-decoration: none;\r\n+    /* 예시 좌표 영역 - 카드 형태로 수평 배치 */\r\n+    .sample {\r\n+      margin-top: 10px;\r\n+      background: #f9f9f9;\r\n+      padding: 10px;\r\n+      border: 1px solid #ddd;\r\n       border-radius: 5px;\r\n-      transition: 0.3s;\r\n-      margin-bottom: 15px;\r\n+      display: flex;\r\n+      gap: 10px;\r\n+      justify-content: center;\r\n+      flex-wrap: wrap;\r\n     }\r\n-    .location-link:hover {\r\n-      background-color: #004d32;\r\n-    }\r\n-    \r\n-    /* 예시 좌표 영역 */\r\n-    .sample {\r\n-      margin-top: 20px;\r\n-      background: white;\r\n-      padding: 20px;\r\n-      border-radius: 10px;\r\n-      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);\r\n-    }\r\n-    \r\n-    /* 예시 리스트 */\r\n     .sample ul {\r\n       display: flex;\r\n       gap: 10px;\r\n       list-style: none;\r\n       padding: 0;\r\n-      justify-content: center;\r\n-      flex-wrap: wrap;\r\n+      margin: 0;\r\n     }\r\n     .sample li {\r\n-      background: #f8f8f8;\r\n-      padding: 15px;\r\n+      border: 1px solid #ccc;\r\n+      padding: 10px;\r\n       border-radius: 8px;\r\n-      width: 200px;\r\n-      box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);\r\n-      text-align: center;\r\n+      width: 180px;\r\n+      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n     }\r\n     .sample li div {\r\n-      font-size: 14px;\r\n-      color: #333;\r\n+      border: none;\r\n       margin: 4px 0;\r\n     }\r\n-    \r\n-    /* 입력창 & 버튼 */\r\n-    input {\r\n-      padding: 10px;\r\n-      font-size: 16px;\r\n-      width: 220px;\r\n-      border: 2px solid #ccc;\r\n-      border-radius: 5px;\r\n-      text-align: center;\r\n-    }\r\n-    input:focus {\r\n-      border-color: #006241;\r\n-    }\r\n-    button {\r\n-      background-color: #006241;\r\n-      color: white;\r\n-      border: none;\r\n-      padding: 12px 18px;\r\n-      font-size: 16px;\r\n-      cursor: pointer;\r\n-      border-radius: 5px;\r\n-      transition: 0.3s;\r\n-      font-weight: bold;\r\n-    }\r\n-    button:hover {\r\n-      background-color: #004d32;\r\n-    }\r\n-    \r\n-    /* 결과 박스 */\r\n-    .result-box {\r\n-      background: white;\r\n-      padding: 20px;\r\n-      border-radius: 10px;\r\n-      margin-top: 20px;\r\n-      box-shadow: 0px 3px 8px rgba(0, 0, 0, 0.1);\r\n-      text-align: left;\r\n-      display: none;\r\n-    }\r\n-    .result-box p {\r\n-      margin: 8px 0;\r\n-    }\r\n-    .highlight {\r\n-      font-weight: bold;\r\n-      color: #006241;\r\n-    }\r\n-    .loading {\r\n-      color: #d4a373;\r\n-      font-weight: bold;\r\n-    }\r\n   </style>\r\n+  <!-- Turf.js 라이브러리 (CDN) -->\r\n+  <script src=\"https://cdn.jsdelivr.net/npm/@turf/turf@6/turf.min.js\"></script>\r\n </head>\r\n <body>\r\n-  \r\n   <!-- [섹션 1] 직접 입력 방식 -->\r\n   <section id=\"section1\">\r\n-    <h1>내 위치 기반 스타벅스 매장 찾기 (직접 입력)</h1>\r\n-    <p>아래 입력란에 위도와 경도를 직접 입력한 후, 버튼을 눌러 해당 위치에서 가장 가까운 스타벅스를 확인합니다.</p>\r\n-\r\n-    <!-- 링크 -->\r\n-    <a href=\"https://jusoga.com/\" target=\"_blank\" class=\"location-link\">📍 위도/경도 찾기 사이트</a>\r\n-\r\n+    <h1>내 위치에서 가장 가까운 스타벅스 찾기 (직접 입력)</h1>\r\n+    <p>\r\n+      아래 입력란에 위도와 경도를 직접 입력한 후, 버튼을 눌러 해당 위치에서 가장 가까운 스타벅스를 확인합니다.\r\n+    </p>\r\n     <!-- 예시 좌표 영역 -->\r\n     <div class=\"sample\">\r\n-      <h2>📌 예시 좌표 목록</h2>\r\n+      <a href=\"https://jusoga.com/\" target=\"_blank\">위도 경도 찾기 사이트</a>\r\n       <ul>\r\n         <li>\r\n-          <strong>남산스퀘어</strong>\r\n-          <div>위도: 37.56165</div>\r\n-          <div>경도: 126.99110</div>\r\n+          <span>남산스퀘어(우리 장소)</span>\r\n+          <div>위도: 37.56165121272</div>\r\n+          <div>경도: 126.99110648606</div>\r\n         </li>\r\n         <li>\r\n-          <strong>성균관대학교(명륜)</strong>\r\n-          <div>위도: 37.58490</div>\r\n-          <div>경도: 126.99694</div>\r\n+          <span>성균관대학교(명륜)</span>\r\n+          <div>위도: 37.584907418709</div>\r\n+          <div>경도: 126.99694886506</div>\r\n         </li>\r\n         <li>\r\n-          <strong>단국대학교(죽전)</strong>\r\n-          <div>위도: 37.32346</div>\r\n-          <div>경도: 127.12558</div>\r\n+          <span>단국대학교(죽전)</span>\r\n+          <div>위도: 37.323468556539</div>\r\n+          <div>경도: 127.12558057358</div>\r\n         </li>\r\n         <li>\r\n-          <strong>부산 해운대구</strong>\r\n-          <div>위도: 35.17674</div>\r\n-          <div>경도: 129.18405</div>\r\n+          <span>부산 해운대구</span>\r\n+          <div>위도: 35.176747504632</div>\r\n+          <div>경도: 129.18405788222</div>\r\n         </li>\r\n       </ul>\r\n     </div>\r\n-\r\n     <div>\r\n       <!-- datalist를 사용하여 추천 옵션 추가 -->\r\n       <input type=\"text\" id=\"latitude1\" placeholder=\"위도 입력 (예: 37.5665)\" list=\"latOptions\">\r\n       <datalist id=\"latOptions\">\r\n-        <option value=\"37.56165\"></option>\r\n-        <option value=\"37.58490\"></option>\r\n-        <option value=\"37.32346\"></option>\r\n-        <option value=\"35.17674\"></option>\r\n+        <option value=\"37.56165121272\"></option>\r\n+        <option value=\"37.584907418709\"></option>\r\n+        <option value=\"37.323468556539\"></option>\r\n+        <option value=\"35.176747504632\"></option>\r\n       </datalist>\r\n       <input type=\"text\" id=\"longitude1\" placeholder=\"경도 입력 (예: 126.9780)\" list=\"lngOptions\">\r\n       <datalist id=\"lngOptions\">\r\n-        <option value=\"126.99110\"></option>\r\n-        <option value=\"126.99694\"></option>\r\n-        <option value=\"127.12558\"></option>\r\n-        <option value=\"129.18405\"></option>\r\n+        <option value=\"126.99110648606\"></option>\r\n+        <option value=\"126.99694886506\"></option>\r\n+        <option value=\"127.12558057358\"></option>\r\n+        <option value=\"129.18405788222\"></option>\r\n       </datalist>\r\n     </div>\r\n     <button id=\"findBtn1\">가장 가까운 스타벅스 찾기</button>\r\n     <div id=\"result1\" class=\"result-box\"></div>\r\n   </section>\r\n-\r\n+  \r\n+  <hr>\r\n+  \r\n+  <!-- [섹션 2] Geolocation + 구 판별 방식 -->\r\n+  <section id=\"section2\">\r\n+    <h1>내 위치 기반 스타벅스 매장 찾기 (구 판별)</h1>\r\n+    <p>\r\n+      현재 위치의 위도/경도만으로 어느 구·군에 있는지 판별한 후, 해당 시도/구군 코드를 사용해 스타벅스 매장 정보를 가져옵니다.\r\n+    </p>\r\n+    <button id=\"findBtn2\">가장 가까운 스타벅스 찾기</button>\r\n+    <div id=\"result2\" class=\"result-box\"></div>\r\n+  </section>\r\n+  \r\n   <script>\r\n+    /* ===============================\r\n+       [공통 함수들]\r\n+    ================================ */\r\n+    function computeDistance(lat1, lon1, lat2, lon2) {\r\n+      const toRad = x => x * Math.PI / 180;\r\n+      const R = 6371; // km\r\n+      const dLat = toRad(lat2 - lat1);\r\n+      const dLon = toRad(lon2 - lon1);\r\n+      const a = Math.sin(dLat/2) ** 2 +\r\n+                Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *\r\n+                Math.sin(dLon/2) ** 2;\r\n+      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n+      return R * c;\r\n+    }\r\n+    \r\n+    function findNearestStore(stores, currentLat, currentLng) {\r\n+      let nearestStore = null;\r\n+      let minDistance = Infinity;\r\n+      stores.forEach(store => {\r\n+        const storeLat = parseFloat(store.lat);\r\n+        const storeLng = store.lng ? parseFloat(store.lng) : parseFloat(store.lot);\r\n+        if (isNaN(storeLat) || isNaN(storeLng)) return;\r\n+        const distance = computeDistance(currentLat, currentLng, storeLat, storeLng);\r\n+        if (distance < minDistance) {\r\n+          minDistance = distance;\r\n+          nearestStore = { ...store, distance };\r\n+        }\r\n+      });\r\n+      return nearestStore;\r\n+    }\r\n+    \r\n+    /* ===============================\r\n+       [섹션 1] 직접 입력 방식 관련\r\n+    ================================ */\r\n+    async function fetchStarbucksStoresDirect(lat, lng) {\r\n+      // 예제에서는 서울(01) / 해운대구(0118) 사용\r\n+      const sido_cd = \"01\";\r\n+      const gugun_cd = \"0118\";\r\n+      const formData = new URLSearchParams();\r\n+      formData.append('ins_lat', lat);\r\n+      formData.append('ins_lng', lng);\r\n+      formData.append('p_sido_cd', sido_cd);\r\n+      formData.append('p_gugun_cd', gugun_cd);\r\n+      formData.append('in_biz_cd', '');\r\n+      formData.append('iend', '2000');\r\n+      formData.append('set_date', '');\r\n+      \r\n+      try {\r\n+        const response = await fetch(\"https://www.starbucks.co.kr/store/getStore.do\", {\r\n+          method: \"POST\",\r\n+          headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n+          body: formData.toString()\r\n+        });\r\n+        const data = await response.json();\r\n+        return data.list;\r\n+      } catch (error) {\r\n+        console.error(\"스타벅스 매장 데이터 요청 에러:\", error);\r\n+        throw error;\r\n+      }\r\n+    }\r\n+    \r\n     document.getElementById(\"findBtn1\").addEventListener(\"click\", async () => {\r\n       const resultDiv = document.getElementById(\"result1\");\r\n+      // 결과 영역 보이기\r\n       resultDiv.style.display = \"block\";\r\n-      resultDiv.innerHTML = `<p class=\"loading\">스타벅스 매장 정보를 가져오는 중입니다...</p>`;\r\n-      \r\n+      // 먼저 로딩 메시지 출력\r\n+      resultDiv.innerHTML = `<p class=\"detail\">입력된 위치: <span class=\"highlight\">--, --</span></p>\r\n+                             <p class=\"detail loading\">스타벅스 매장 정보를 가져오는 중입니다...</p>`;\r\n       const latInput = document.getElementById(\"latitude1\").value.trim();\r\n       const lngInput = document.getElementById(\"longitude1\").value.trim();\r\n       if (!latInput || !lngInput) {\r\n-        resultDiv.innerHTML = \"<p class='highlight'>위도와 경도를 입력하세요.</p>\";\r\n+        resultDiv.innerHTML = \"<p class='detail'>위도와 경도를 입력하세요.</p>\";\r\n         return;\r\n       }\r\n-\r\n       const currentLat = parseFloat(latInput);\r\n       const currentLng = parseFloat(lngInput);\r\n       if (isNaN(currentLat) || isNaN(currentLng)) {\r\n-        resultDiv.innerHTML = \"<p class='highlight'>유효한 위도와 경도를 입력하세요.</p>\";\r\n+        resultDiv.innerHTML = \"<p class='detail'>유효한 위도와 경도를 입력하세요.</p>\";\r\n         return;\r\n       }\r\n-\r\n+      // 업데이트: 입력된 좌표 표시\r\n       resultDiv.innerHTML = `<p class=\"detail\">입력된 위치: <span class=\"highlight\">${currentLat.toFixed(5)}, ${currentLng.toFixed(5)}</span></p>\r\n-                             <p class=\"loading\">스타벅스 매장 정보를 가져오는 중입니다...</p>`;\r\n-\r\n-      // 스타벅스 API 호출 예제\r\n-      setTimeout(() => {\r\n-        resultDiv.innerHTML = `<p class=\"detail\">입력된 위치: <span class=\"highlight\">${currentLat.toFixed(5)}, ${currentLng.toFixed(5)}</span></p>\r\n-                               <p class=\"highlight\">가장 가까운 스타벅스 매장</p>\r\n-                               <p>매장명: <span class=\"highlight\">광화문우체국</span></p>\r\n-                               <p>주소: 서울특별시 종로구 서린동 154-1 광화문우체국</p>\r\n-                               <p>약 <span class=\"highlight\">0.39 km</span> 떨어져 있습니다.</p>`;\r\n-      }, 2000);\r\n+                             <p class=\"detail loading\">스타벅스 매장 정보를 가져오는 중입니다...</p>`;\r\n+      try {\r\n+        const stores = await fetchStarbucksStoresDirect(currentLat, currentLng);\r\n+        // 응답 도착 시 로딩 메시지를 제거하고 결과로 대체\r\n+        let finalHTML = `<p class=\"detail\">입력된 위치: <span class=\"highlight\">${currentLat.toFixed(5)}, ${currentLng.toFixed(5)}</span></p>`;\r\n+        if (!stores || stores.length === 0) {\r\n+          finalHTML += `<p class=\"detail\">매장 정보를 불러오지 못했습니다.</p>`;\r\n+          resultDiv.innerHTML = finalHTML;\r\n+          return;\r\n+        }\r\n+        const nearestStore = findNearestStore(stores, currentLat, currentLng);\r\n+        if (nearestStore) {\r\n+          finalHTML += `<p class=\"header\">가장 가까운 스타벅스 매장</p>\r\n+                        <p class=\"detail\">매장명: <span class=\"highlight\">${nearestStore.s_name}</span></p>\r\n+                        <p class=\"detail\">주소: <span class=\"highlight\">${nearestStore.addr}</span></p>\r\n+                        <p class=\"detail\">약 <span class=\"highlight\">${nearestStore.distance.toFixed(2)}</span> km 떨어져 있습니다.</p>`;\r\n+        } else {\r\n+          finalHTML += `<p class=\"detail\">좌표 정보를 찾을 수 없는 매장이 있습니다.</p>`;\r\n+        }\r\n+        resultDiv.innerHTML = finalHTML;\r\n+      } catch (error) {\r\n+        resultDiv.innerHTML = `<p class=\"detail\">에러 발생: ${error.message}</p>`;\r\n+      }\r\n     });\r\n+    \r\n+    /* ===============================\r\n+       [섹션 2] Geolocation + 구 판별 방식 관련\r\n+       - mapping.json과 krDistricts.json 파일 필요 (서버에 존재해야 함)\r\n+    ================================ */\r\n+    let mappingData = {};\r\n+    let districtPolygons = [];\r\n+    \r\n+    async function loadMappingData() {\r\n+      try {\r\n+        const response = await fetch('mapping.json');\r\n+        mappingData = await response.json();\r\n+      } catch (error) {\r\n+        console.error(\"mapping.json 로드 에러:\", error);\r\n+      }\r\n+    }\r\n+    \r\n+    async function loadDistrictPolygons() {\r\n+      try {\r\n+        const response = await fetch('krDistricts.json');\r\n+        const data = await response.json();\r\n+        districtPolygons = data.districtPolygons;\r\n+      } catch (error) {\r\n+        console.error(\"krDistricts.json 로드 에러:\", error);\r\n+      }\r\n+    }\r\n+    \r\n+    function getCurrentLocation() {\r\n+      return new Promise((resolve, reject) => {\r\n+        if (navigator.geolocation) {\r\n+          navigator.geolocation.getCurrentPosition(resolve, reject);\r\n+        } else {\r\n+          reject(new Error(\"Geolocation을 지원하지 않는 브라우저입니다.\"));\r\n+        }\r\n+      });\r\n+    }\r\n+    \r\n+    // Turf.js를 이용해 현재 위치의 구·군 판별\r\n+    function determineDistrict(lat, lng) {\r\n+      const point = turf.point([lng, lat]);\r\n+      for (let district of districtPolygons) {\r\n+        if (turf.booleanPointInPolygon(point, district.polygon)) {\r\n+          return district;\r\n+        }\r\n+      }\r\n+      return null;\r\n+    }\r\n+    \r\n+    async function fetchStarbucksStoresByDistrict(lat, lng, sido_cd, gugun_cd) {\r\n+      const formData = new URLSearchParams();\r\n+      formData.append('ins_lat', lat);\r\n+      formData.append('ins_lng', lng);\r\n+      formData.append('p_sido_cd', sido_cd);\r\n+      formData.append('p_gugun_cd', gugun_cd);\r\n+      formData.append('in_biz_cd', '');\r\n+      formData.append('iend', '2000');\r\n+      formData.append('set_date', '');\r\n+      \r\n+      try {\r\n+        const response = await fetch(\"https://www.starbucks.co.kr/store/getStore.do\", {\r\n+          method: \"POST\",\r\n+          headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n+          body: formData.toString()\r\n+        });\r\n+        const data = await response.json();\r\n+        return data.list;\r\n+      } catch (error) {\r\n+        console.error(\"스타벅스 매장 데이터 요청 에러:\", error);\r\n+        throw error;\r\n+      }\r\n+    }\r\n+    \r\n+    document.getElementById(\"findBtn2\").addEventListener(\"click\", async () => {\r\n+      const resultDiv = document.getElementById(\"result2\");\r\n+      resultDiv.style.display = \"block\";\r\n+      resultDiv.innerHTML = `<p class=\"detail\">데이터를 불러오고 위치를 확인 중입니다...</p>`;\r\n+      try {\r\n+        await loadMappingData();\r\n+        await loadDistrictPolygons();\r\n+        const position = await getCurrentLocation();\r\n+        const currentLat = position.coords.latitude;\r\n+        const currentLng = position.coords.longitude;\r\n+        \r\n+        const district = determineDistrict(currentLat, currentLng);\r\n+        let sido_cd = mappingData.sidoMapping[\"서울\"]; // 기본값: 서울\r\n+        let gugun_cd;\r\n+        let districtMessage;\r\n+        if (district) {\r\n+          gugun_cd = district.code;\r\n+          districtMessage = `현재 위치는 <span class=\"highlight\">${district.name}</span>에 속합니다.`;\r\n+        } else {\r\n+          gugun_cd = \"0119\"; // 기본값: 중구\r\n+          districtMessage = \"현재 위치가 어느 구에도 속하지 않아 기본값(중구)을 사용합니다.\";\r\n+        }\r\n+        \r\n+        let finalHTML = `<p class=\"detail\">현재 좌표: <span class=\"highlight\">${currentLat.toFixed(5)}, ${currentLng.toFixed(5)}</span></p>\r\n+                         <p class=\"detail\">${districtMessage}</p>\r\n+                         <p class=\"detail\">(사용 코드: <span class=\"highlight\">${sido_cd} / ${gugun_cd}</span>)</p>`;\r\n+        finalHTML += `<p class=\"detail\">스타벅스 매장 정보를 가져오는 중입니다...</p>`;\r\n+        resultDiv.innerHTML = finalHTML;\r\n+        \r\n+        const stores = await fetchStarbucksStoresByDistrict(currentLat, currentLng, sido_cd, gugun_cd);\r\n+        if (!stores || stores.length === 0) {\r\n+          finalHTML += `<p class=\"detail\">매장 정보를 불러오지 못했습니다.</p>`;\r\n+          resultDiv.innerHTML = finalHTML;\r\n+          return;\r\n+        }\r\n+        \r\n+        const nearestStore = findNearestStore(stores, currentLat, currentLng);\r\n+        if (nearestStore) {\r\n+          finalHTML += `<p class=\"header\">가장 가까운 스타벅스 매장</p>\r\n+                        <p class=\"detail\">매장명: <span class=\"highlight\">${nearestStore.s_name}</span></p>\r\n+                        <p class=\"detail\">주소: <span class=\"highlight\">${nearestStore.addr}</span></p>\r\n+                        <p class=\"detail\">약 <span class=\"highlight\">${nearestStore.distance.toFixed(2)}</span> km 떨어져 있습니다.</p>`;\r\n+        } else {\r\n+          finalHTML += `<p class=\"detail\">좌표 정보를 찾을 수 없는 매장이 있습니다.</p>`;\r\n+        }\r\n+        resultDiv.innerHTML = finalHTML;\r\n+      } catch (error) {\r\n+        resultDiv.innerHTML = `<p class=\"detail\">에러 발생: ${error.message}</p>`;\r\n+      }\r\n+    });\r\n   </script>\r\n-\r\n </body>\r\n </html>\r\n"
                },
                {
                    "date": 1740103376958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n <html lang=\"ko\">\r\n <head>\r\n   <meta charset=\"UTF-8\">\r\n   <title>내 위치 기반 스타벅스 매장 찾기 - 통합버전</title>\r\n-  <link rel=\"stylesheet\" href=\"style.css\">\r\n+  <link rel=\"stylesheet\" href=\"./css/style.css\">\r\n   <style>\r\n     body { font-family: Arial, sans-serif; margin: 20px; }\r\n     hr { margin: 40px 0; }\r\n     /* 결과 박스는 기본적으로 감춤 */\r\n"
                },
                {
                    "date": 1740105234169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,8 @@\n       아래 입력란에 위도와 경도를 직접 입력한 후, 버튼을 눌러 해당 위치에서 가장 가까운 스타벅스를 확인합니다.\r\n     </p>\r\n     <!-- 예시 좌표 영역 -->\r\n     <div class=\"sample\">\r\n-      <a href=\"https://jusoga.com/\" target=\"_blank\">위도 경도 찾기 사이트</a>\r\n       <ul>\r\n         <li>\r\n           <span>남산스퀘어(우리 장소)</span>\r\n           <div>위도: 37.56165121272</div>\r\n@@ -76,8 +75,10 @@\n           <div>경도: 129.18405788222</div>\r\n         </li>\r\n       </ul>\r\n     </div>\r\n+    <ul>\r\n+\r\n     <div>\r\n       <!-- datalist를 사용하여 추천 옵션 추가 -->\r\n       <input type=\"text\" id=\"latitude1\" placeholder=\"위도 입력 (예: 37.5665)\" list=\"latOptions\">\r\n       <datalist id=\"latOptions\">\r\n"
                },
                {
                    "date": 1740105247357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,10 +75,8 @@\n           <div>경도: 129.18405788222</div>\r\n         </li>\r\n       </ul>\r\n     </div>\r\n-    <ul>\r\n-\r\n     <div>\r\n       <!-- datalist를 사용하여 추천 옵션 추가 -->\r\n       <input type=\"text\" id=\"latitude1\" placeholder=\"위도 입력 (예: 37.5665)\" list=\"latOptions\">\r\n       <datalist id=\"latOptions\">\r\n"
                },
                {
                    "date": 1740105360841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,121 @@\n   <meta charset=\"UTF-8\">\r\n   <title>내 위치 기반 스타벅스 매장 찾기 - 통합버전</title>\r\n   <link rel=\"stylesheet\" href=\"./css/style.css\">\r\n   <style>\r\n+    body {\r\n+      font-family: 'Noto Sans KR', Arial, sans-serif;\r\n+      background-color: #f2f0eb;\r\n+      margin: 0;\r\n+      padding: 20px;\r\n+      text-align: center;\r\n+    }\r\n+    h1 {\r\n+      font-size: 26px;\r\n+      font-weight: bold;\r\n+      color: #006241;\r\n+    }\r\n+    p {\r\n+      font-size: 18px;\r\n+      color: #444;\r\n+    }\r\n+    \r\n+    /* 링크 스타일 */\r\n+    .location-link {\r\n+      display: inline-block;\r\n+      background-color: #006241;\r\n+      color: white;\r\n+      padding: 8px 16px;\r\n+      font-size: 16px;\r\n+      text-decoration: none;\r\n+      border-radius: 5px;\r\n+      transition: 0.3s;\r\n+      margin-bottom: 15px;\r\n+    }\r\n+    .location-link:hover {\r\n+      background-color: #004d32;\r\n+    }\r\n+    \r\n+    /* 예시 좌표 영역 */\r\n+    .sample {\r\n+      margin-top: 20px;\r\n+      background: white;\r\n+      padding: 20px;\r\n+      border-radius: 10px;\r\n+      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);\r\n+    }\r\n+    \r\n+    /* 예시 리스트 */\r\n+    .sample ul {\r\n+      display: flex;\r\n+      gap: 10px;\r\n+      list-style: none;\r\n+      padding: 0;\r\n+      justify-content: center;\r\n+      flex-wrap: wrap;\r\n+    }\r\n+    .sample li {\r\n+      background: #f8f8f8;\r\n+      padding: 15px;\r\n+      border-radius: 8px;\r\n+      width: 200px;\r\n+      box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);\r\n+      text-align: center;\r\n+    }\r\n+    .sample li div {\r\n+      font-size: 14px;\r\n+      color: #333;\r\n+      margin: 4px 0;\r\n+    }\r\n+    \r\n+    /* 입력창 & 버튼 */\r\n+    input {\r\n+      padding: 10px;\r\n+      font-size: 16px;\r\n+      width: 220px;\r\n+      border: 2px solid #ccc;\r\n+      border-radius: 5px;\r\n+      text-align: center;\r\n+    }\r\n+    input:focus {\r\n+      border-color: #006241;\r\n+    }\r\n+    button {\r\n+      background-color: #006241;\r\n+      color: white;\r\n+      border: none;\r\n+      padding: 12px 18px;\r\n+      font-size: 16px;\r\n+      cursor: pointer;\r\n+      border-radius: 5px;\r\n+      transition: 0.3s;\r\n+      font-weight: bold;\r\n+    }\r\n+    button:hover {\r\n+      background-color: #004d32;\r\n+    }\r\n+    \r\n+    /* 결과 박스 */\r\n+    .result-box {\r\n+      background: white;\r\n+      padding: 20px;\r\n+      border-radius: 10px;\r\n+      margin-top: 20px;\r\n+      box-shadow: 0px 3px 8px rgba(0, 0, 0, 0.1);\r\n+      text-align: left;\r\n+      display: none;\r\n+    }\r\n+    .result-box p {\r\n+      margin: 8px 0;\r\n+    }\r\n+    .highlight {\r\n+      font-weight: bold;\r\n+      color: #006241;\r\n+    }\r\n+    .loading {\r\n+      color: #d4a373;\r\n+      font-weight: bold;\r\n+    }\r\n     body { font-family: Arial, sans-serif; margin: 20px; }\r\n     hr { margin: 40px 0; }\r\n     /* 결과 박스는 기본적으로 감춤 */\r\n     .result-box { display: none; }\r\n@@ -75,8 +188,10 @@\n           <div>경도: 129.18405788222</div>\r\n         </li>\r\n       </ul>\r\n     </div>\r\n+    <a href=\"https://jusoga.com/\" target=\"_blank\">위도 경도 찾기 사이트</a>\r\n+\r\n     <div>\r\n       <!-- datalist를 사용하여 추천 옵션 추가 -->\r\n       <input type=\"text\" id=\"latitude1\" placeholder=\"위도 입력 (예: 37.5665)\" list=\"latOptions\">\r\n       <datalist id=\"latOptions\">\r\n"
                },
                {
                    "date": 1740105380765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,10 +157,67 @@\n   <!-- Turf.js 라이브러리 (CDN) -->\r\n   <script src=\"https://cdn.jsdelivr.net/npm/@turf/turf@6/turf.min.js\"></script>\r\n </head>\r\n <body>\r\n+\r\n+  \r\n   <!-- [섹션 1] 직접 입력 방식 -->\r\n   <section id=\"section1\">\r\n+    <h1>내 위치 기반 스타벅스 매장 찾기 (직접 입력)</h1>\r\n+    <p>아래 입력란에 위도와 경도를 직접 입력한 후, 버튼을 눌러 해당 위치에서 가장 가까운 스타벅스를 확인합니다.</p>\r\n+\r\n+    <!-- 링크 -->\r\n+    <a href=\"https://jusoga.com/\" target=\"_blank\" class=\"location-link\">📍 위도/경도 찾기 사이트</a>\r\n+\r\n+    <!-- 예시 좌표 영역 -->\r\n+    <div class=\"sample\">\r\n+      <h2>📌 예시 좌표 목록</h2>\r\n+      <ul>\r\n+        <li>\r\n+          <strong>남산스퀘어</strong>\r\n+          <div>위도: 37.56165</div>\r\n+          <div>경도: 126.99110</div>\r\n+        </li>\r\n+        <li>\r\n+          <strong>성균관대학교(명륜)</strong>\r\n+          <div>위도: 37.58490</div>\r\n+          <div>경도: 126.99694</div>\r\n+        </li>\r\n+        <li>\r\n+          <strong>단국대학교(죽전)</strong>\r\n+          <div>위도: 37.32346</div>\r\n+          <div>경도: 127.12558</div>\r\n+        </li>\r\n+        <li>\r\n+          <strong>부산 해운대구</strong>\r\n+          <div>위도: 35.17674</div>\r\n+          <div>경도: 129.18405</div>\r\n+        </li>\r\n+      </ul>\r\n+    </div>\r\n+\r\n+    <div>\r\n+      <!-- datalist를 사용하여 추천 옵션 추가 -->\r\n+      <input type=\"text\" id=\"latitude1\" placeholder=\"위도 입력 (예: 37.5665)\" list=\"latOptions\">\r\n+      <datalist id=\"latOptions\">\r\n+        <option value=\"37.56165\"></option>\r\n+        <option value=\"37.58490\"></option>\r\n+        <option value=\"37.32346\"></option>\r\n+        <option value=\"35.17674\"></option>\r\n+      </datalist>\r\n+      <input type=\"text\" id=\"longitude1\" placeholder=\"경도 입력 (예: 126.9780)\" list=\"lngOptions\">\r\n+      <datalist id=\"lngOptions\">\r\n+        <option value=\"126.99110\"></option>\r\n+        <option value=\"126.99694\"></option>\r\n+        <option value=\"127.12558\"></option>\r\n+        <option value=\"129.18405\"></option>\r\n+      </datalist>\r\n+    </div>\r\n+    <button id=\"findBtn1\">가장 가까운 스타벅스 찾기</button>\r\n+    <div id=\"result1\" class=\"result-box\"></div>\r\n+  </section>\r\n+  <!-- [섹션 1] 직접 입력 방식 -->\r\n+  <section id=\"section1\">\r\n     <h1>내 위치에서 가장 가까운 스타벅스 찾기 (직접 입력)</h1>\r\n     <p>\r\n       아래 입력란에 위도와 경도를 직접 입력한 후, 버튼을 눌러 해당 위치에서 가장 가까운 스타벅스를 확인합니다.\r\n     </p>\r\n"
                },
                {
                    "date": 1740105411628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -214,8 +214,9 @@\n     </div>\r\n     <button id=\"findBtn1\">가장 가까운 스타벅스 찾기</button>\r\n     <div id=\"result1\" class=\"result-box\"></div>\r\n   </section>\r\n+\r\n   <!-- [섹션 1] 직접 입력 방식 -->\r\n   <section id=\"section1\">\r\n     <h1>내 위치에서 가장 가까운 스타벅스 찾기 (직접 입력)</h1>\r\n     <p>\r\n@@ -387,8 +388,41 @@\n       } catch (error) {\r\n         resultDiv.innerHTML = `<p class=\"detail\">에러 발생: ${error.message}</p>`;\r\n       }\r\n     });\r\n+    <script>\r\n+      document.getElementById(\"findBtn1\").addEventListener(\"click\", async () => {\r\n+        const resultDiv = document.getElementById(\"result1\");\r\n+        resultDiv.style.display = \"block\";\r\n+        resultDiv.innerHTML = `<p class=\"loading\">스타벅스 매장 정보를 가져오는 중입니다...</p>`;\r\n+        \r\n+        const latInput = document.getElementById(\"latitude1\").value.trim();\r\n+        const lngInput = document.getElementById(\"longitude1\").value.trim();\r\n+        if (!latInput || !lngInput) {\r\n+          resultDiv.innerHTML = \"<p class='highlight'>위도와 경도를 입력하세요.</p>\";\r\n+          return;\r\n+        }\r\n+  \r\n+        const currentLat = parseFloat(latInput);\r\n+        const currentLng = parseFloat(lngInput);\r\n+        if (isNaN(currentLat) || isNaN(currentLng)) {\r\n+          resultDiv.innerHTML = \"<p class='highlight'>유효한 위도와 경도를 입력하세요.</p>\";\r\n+          return;\r\n+        }\r\n+  \r\n+        resultDiv.innerHTML = `<p class=\"detail\">입력된 위치: <span class=\"highlight\">${currentLat.toFixed(5)}, ${currentLng.toFixed(5)}</span></p>\r\n+                               <p class=\"loading\">스타벅스 매장 정보를 가져오는 중입니다...</p>`;\r\n+  \r\n+        // 스타벅스 API 호출 예제\r\n+        setTimeout(() => {\r\n+          resultDiv.innerHTML = `<p class=\"detail\">입력된 위치: <span class=\"highlight\">${currentLat.toFixed(5)}, ${currentLng.toFixed(5)}</span></p>\r\n+                                 <p class=\"highlight\">가장 가까운 스타벅스 매장</p>\r\n+                                 <p>매장명: <span class=\"highlight\">광화문우체국</span></p>\r\n+                                 <p>주소: 서울특별시 종로구 서린동 154-1 광화문우체국</p>\r\n+                                 <p>약 <span class=\"highlight\">0.39 km</span> 떨어져 있습니다.</p>`;\r\n+        }, 2000);\r\n+      });\r\n+    </script>\r\n     \r\n     /* ===============================\r\n        [섹션 2] Geolocation + 구 판별 방식 관련\r\n        - mapping.json과 krDistricts.json 파일 필요 (서버에 존재해야 함)\r\n"
                },
                {
                    "date": 1740105427203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -214,9 +214,9 @@\n     </div>\r\n     <button id=\"findBtn1\">가장 가까운 스타벅스 찾기</button>\r\n     <div id=\"result1\" class=\"result-box\"></div>\r\n   </section>\r\n-\r\n+  \r\n   <!-- [섹션 1] 직접 입력 방식 -->\r\n   <section id=\"section1\">\r\n     <h1>내 위치에서 가장 가까운 스타벅스 찾기 (직접 입력)</h1>\r\n     <p>\r\n@@ -388,41 +388,8 @@\n       } catch (error) {\r\n         resultDiv.innerHTML = `<p class=\"detail\">에러 발생: ${error.message}</p>`;\r\n       }\r\n     });\r\n-    <script>\r\n-      document.getElementById(\"findBtn1\").addEventListener(\"click\", async () => {\r\n-        const resultDiv = document.getElementById(\"result1\");\r\n-        resultDiv.style.display = \"block\";\r\n-        resultDiv.innerHTML = `<p class=\"loading\">스타벅스 매장 정보를 가져오는 중입니다...</p>`;\r\n-        \r\n-        const latInput = document.getElementById(\"latitude1\").value.trim();\r\n-        const lngInput = document.getElementById(\"longitude1\").value.trim();\r\n-        if (!latInput || !lngInput) {\r\n-          resultDiv.innerHTML = \"<p class='highlight'>위도와 경도를 입력하세요.</p>\";\r\n-          return;\r\n-        }\r\n-  \r\n-        const currentLat = parseFloat(latInput);\r\n-        const currentLng = parseFloat(lngInput);\r\n-        if (isNaN(currentLat) || isNaN(currentLng)) {\r\n-          resultDiv.innerHTML = \"<p class='highlight'>유효한 위도와 경도를 입력하세요.</p>\";\r\n-          return;\r\n-        }\r\n-  \r\n-        resultDiv.innerHTML = `<p class=\"detail\">입력된 위치: <span class=\"highlight\">${currentLat.toFixed(5)}, ${currentLng.toFixed(5)}</span></p>\r\n-                               <p class=\"loading\">스타벅스 매장 정보를 가져오는 중입니다...</p>`;\r\n-  \r\n-        // 스타벅스 API 호출 예제\r\n-        setTimeout(() => {\r\n-          resultDiv.innerHTML = `<p class=\"detail\">입력된 위치: <span class=\"highlight\">${currentLat.toFixed(5)}, ${currentLng.toFixed(5)}</span></p>\r\n-                                 <p class=\"highlight\">가장 가까운 스타벅스 매장</p>\r\n-                                 <p>매장명: <span class=\"highlight\">광화문우체국</span></p>\r\n-                                 <p>주소: 서울특별시 종로구 서린동 154-1 광화문우체국</p>\r\n-                                 <p>약 <span class=\"highlight\">0.39 km</span> 떨어져 있습니다.</p>`;\r\n-        }, 2000);\r\n-      });\r\n-    </script>\r\n     \r\n     /* ===============================\r\n        [섹션 2] Geolocation + 구 판별 방식 관련\r\n        - mapping.json과 krDistricts.json 파일 필요 (서버에 존재해야 함)\r\n@@ -544,6 +511,39 @@\n         resultDiv.innerHTML = `<p class=\"detail\">에러 발생: ${error.message}</p>`;\r\n       }\r\n     });\r\n   </script>\r\n+  <script>\r\n+    document.getElementById(\"findBtn1\").addEventListener(\"click\", async () => {\r\n+      const resultDiv = document.getElementById(\"result1\");\r\n+      resultDiv.style.display = \"block\";\r\n+      resultDiv.innerHTML = `<p class=\"loading\">스타벅스 매장 정보를 가져오는 중입니다...</p>`;\r\n+      \r\n+      const latInput = document.getElementById(\"latitude1\").value.trim();\r\n+      const lngInput = document.getElementById(\"longitude1\").value.trim();\r\n+      if (!latInput || !lngInput) {\r\n+        resultDiv.innerHTML = \"<p class='highlight'>위도와 경도를 입력하세요.</p>\";\r\n+        return;\r\n+      }\r\n+\r\n+      const currentLat = parseFloat(latInput);\r\n+      const currentLng = parseFloat(lngInput);\r\n+      if (isNaN(currentLat) || isNaN(currentLng)) {\r\n+        resultDiv.innerHTML = \"<p class='highlight'>유효한 위도와 경도를 입력하세요.</p>\";\r\n+        return;\r\n+      }\r\n+\r\n+      resultDiv.innerHTML = `<p class=\"detail\">입력된 위치: <span class=\"highlight\">${currentLat.toFixed(5)}, ${currentLng.toFixed(5)}</span></p>\r\n+                             <p class=\"loading\">스타벅스 매장 정보를 가져오는 중입니다...</p>`;\r\n+\r\n+      // 스타벅스 API 호출 예제\r\n+      setTimeout(() => {\r\n+        resultDiv.innerHTML = `<p class=\"detail\">입력된 위치: <span class=\"highlight\">${currentLat.toFixed(5)}, ${currentLng.toFixed(5)}</span></p>\r\n+                               <p class=\"highlight\">가장 가까운 스타벅스 매장</p>\r\n+                               <p>매장명: <span class=\"highlight\">광화문우체국</span></p>\r\n+                               <p>주소: 서울특별시 종로구 서린동 154-1 광화문우체국</p>\r\n+                               <p>약 <span class=\"highlight\">0.39 km</span> 떨어져 있습니다.</p>`;\r\n+      }, 2000);\r\n+    });\r\n+  </script>\r\n </body>\r\n </html>\r\n"
                },
                {
                    "date": 1740105566064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -192,8 +192,10 @@\n           <div>위도: 35.17674</div>\r\n           <div>경도: 129.18405</div>\r\n         </li>\r\n       </ul>\r\n+      <a href=\"https://jusoga.com/\" target=\"_blank\" class=\"location-link\">📍 위도/경도 찾기 사이트</a>\r\n+\r\n     </div>\r\n \r\n     <div>\r\n       <!-- datalist를 사용하여 추천 옵션 추가 -->\r\n"
                },
                {
                    "date": 1740106697461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,9 @@\n       text-decoration: none;\r\n       border-radius: 5px;\r\n       transition: 0.3s;\r\n       margin-bottom: 15px;\r\n+      width: fit-content;\r\n     }\r\n     .location-link:hover {\r\n       background-color: #004d32;\r\n     }\r\n@@ -130,8 +131,9 @@\n       padding: 10px;\r\n       border: 1px solid #ddd;\r\n       border-radius: 5px;\r\n       display: flex;\r\n+      flex-direction: column;\r\n       gap: 10px;\r\n       justify-content: center;\r\n       flex-wrap: wrap;\r\n     }\r\n@@ -217,64 +219,10 @@\n     <button id=\"findBtn1\">가장 가까운 스타벅스 찾기</button>\r\n     <div id=\"result1\" class=\"result-box\"></div>\r\n   </section>\r\n   \r\n-  <!-- [섹션 1] 직접 입력 방식 -->\r\n-  <section id=\"section1\">\r\n-    <h1>내 위치에서 가장 가까운 스타벅스 찾기 (직접 입력)</h1>\r\n-    <p>\r\n-      아래 입력란에 위도와 경도를 직접 입력한 후, 버튼을 눌러 해당 위치에서 가장 가까운 스타벅스를 확인합니다.\r\n-    </p>\r\n-    <!-- 예시 좌표 영역 -->\r\n-    <div class=\"sample\">\r\n-      <ul>\r\n-        <li>\r\n-          <span>남산스퀘어(우리 장소)</span>\r\n-          <div>위도: 37.56165121272</div>\r\n-          <div>경도: 126.99110648606</div>\r\n-        </li>\r\n-        <li>\r\n-          <span>성균관대학교(명륜)</span>\r\n-          <div>위도: 37.584907418709</div>\r\n-          <div>경도: 126.99694886506</div>\r\n-        </li>\r\n-        <li>\r\n-          <span>단국대학교(죽전)</span>\r\n-          <div>위도: 37.323468556539</div>\r\n-          <div>경도: 127.12558057358</div>\r\n-        </li>\r\n-        <li>\r\n-          <span>부산 해운대구</span>\r\n-          <div>위도: 35.176747504632</div>\r\n-          <div>경도: 129.18405788222</div>\r\n-        </li>\r\n-      </ul>\r\n-    </div>\r\n-    <a href=\"https://jusoga.com/\" target=\"_blank\">위도 경도 찾기 사이트</a>\r\n \r\n-    <div>\r\n-      <!-- datalist를 사용하여 추천 옵션 추가 -->\r\n-      <input type=\"text\" id=\"latitude1\" placeholder=\"위도 입력 (예: 37.5665)\" list=\"latOptions\">\r\n-      <datalist id=\"latOptions\">\r\n-        <option value=\"37.56165121272\"></option>\r\n-        <option value=\"37.584907418709\"></option>\r\n-        <option value=\"37.323468556539\"></option>\r\n-        <option value=\"35.176747504632\"></option>\r\n-      </datalist>\r\n-      <input type=\"text\" id=\"longitude1\" placeholder=\"경도 입력 (예: 126.9780)\" list=\"lngOptions\">\r\n-      <datalist id=\"lngOptions\">\r\n-        <option value=\"126.99110648606\"></option>\r\n-        <option value=\"126.99694886506\"></option>\r\n-        <option value=\"127.12558057358\"></option>\r\n-        <option value=\"129.18405788222\"></option>\r\n-      </datalist>\r\n-    </div>\r\n-    <button id=\"findBtn1\">가장 가까운 스타벅스 찾기</button>\r\n-    <div id=\"result1\" class=\"result-box\"></div>\r\n-  </section>\r\n   \r\n-  <hr>\r\n-  \r\n   <!-- [섹션 2] Geolocation + 구 판별 방식 -->\r\n   <section id=\"section2\">\r\n     <h1>내 위치 기반 스타벅스 매장 찾기 (구 판별)</h1>\r\n     <p>\r\n"
                },
                {
                    "date": 1740106771798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,9 @@\n       text-decoration: none;\r\n       border-radius: 5px;\r\n       transition: 0.3s;\r\n       margin-bottom: 15px;\r\n+      text-align: center;\r\n       width: fit-content;\r\n     }\r\n     .location-link:hover {\r\n       background-color: #004d32;\r\n"
                },
                {
                    "date": 1740106893796,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,9 @@\n     .result-box { display: none; }\r\n     \r\n     /* 예시 좌표 영역 - 카드 형태로 수평 배치 */\r\n     .sample {\r\n-      margin-top: 10px;\r\n+      margin: 10px;\r\n       background: #f9f9f9;\r\n       padding: 10px;\r\n       border: 1px solid #ddd;\r\n       border-radius: 5px;\r\n"
                },
                {
                    "date": 1740106901602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -195,11 +195,11 @@\n           <div>위도: 35.17674</div>\r\n           <div>경도: 129.18405</div>\r\n         </li>\r\n       </ul>\r\n-      <a href=\"https://jusoga.com/\" target=\"_blank\" class=\"location-link\">📍 위도/경도 찾기 사이트</a>\r\n-\r\n+      \r\n     </div>\r\n+    <a href=\"https://jusoga.com/\" target=\"_blank\" class=\"location-link\">📍 위도/경도 찾기 사이트</a>\r\n \r\n     <div>\r\n       <!-- datalist를 사용하여 추천 옵션 추가 -->\r\n       <input type=\"text\" id=\"latitude1\" placeholder=\"위도 입력 (예: 37.5665)\" list=\"latOptions\">\r\n@@ -218,8 +218,9 @@\n       </datalist>\r\n     </div>\r\n     <button id=\"findBtn1\">가장 가까운 스타벅스 찾기</button>\r\n     <div id=\"result1\" class=\"result-box\"></div>\r\n+    <hr>\r\n   </section>\r\n   \r\n \r\n   \r\n"
                },
                {
                    "date": 1740106920266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,10 +196,10 @@\n           <div>경도: 129.18405</div>\r\n         </li>\r\n       </ul>\r\n       \r\n+      <a href=\"https://jusoga.com/\" target=\"_blank\" class=\"location-link\">📍 위도/경도 찾기 사이트</a>\r\n     </div>\r\n-    <a href=\"https://jusoga.com/\" target=\"_blank\" class=\"location-link\">📍 위도/경도 찾기 사이트</a>\r\n \r\n     <div>\r\n       <!-- datalist를 사용하여 추천 옵션 추가 -->\r\n       <input type=\"text\" id=\"latitude1\" placeholder=\"위도 입력 (예: 37.5665)\" list=\"latOptions\">\r\n"
                },
                {
                    "date": 1740106988636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,10 +32,11 @@\n       text-decoration: none;\r\n       border-radius: 5px;\r\n       transition: 0.3s;\r\n       margin-bottom: 15px;\r\n+      width: fit-content;\r\n       text-align: center;\r\n-      width: fit-content;\r\n+      margin: 0 auto;\r\n     }\r\n     .location-link:hover {\r\n       background-color: #004d32;\r\n     }\r\n"
                },
                {
                    "date": 1740107016444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,11 +168,8 @@\n   <section id=\"section1\">\r\n     <h1>내 위치 기반 스타벅스 매장 찾기 (직접 입력)</h1>\r\n     <p>아래 입력란에 위도와 경도를 직접 입력한 후, 버튼을 눌러 해당 위치에서 가장 가까운 스타벅스를 확인합니다.</p>\r\n \r\n-    <!-- 링크 -->\r\n-    <a href=\"https://jusoga.com/\" target=\"_blank\" class=\"location-link\">📍 위도/경도 찾기 사이트</a>\r\n-\r\n     <!-- 예시 좌표 영역 -->\r\n     <div class=\"sample\">\r\n       <h2>📌 예시 좌표 목록</h2>\r\n       <ul>\r\n"
                },
                {
                    "date": 1740107138361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,8 +137,10 @@\n       flex-direction: column;\r\n       gap: 10px;\r\n       justify-content: center;\r\n       flex-wrap: wrap;\r\n+\r\n+      width: fit-content;\r\n     }\r\n     .sample ul {\r\n       display: flex;\r\n       gap: 10px;\r\n"
                },
                {
                    "date": 1740107161675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n       background-color: #f2f0eb;\r\n       margin: 0;\r\n       padding: 20px;\r\n       text-align: center;\r\n+      display: flex;\r\n     }\r\n     h1 {\r\n       font-size: 26px;\r\n       font-weight: bold;\r\n"
                },
                {
                    "date": 1740107167404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,10 @@\n       margin: 0;\r\n       padding: 20px;\r\n       text-align: center;\r\n       display: flex;\r\n+      flex-direction: column;\r\n+      align-items: center;\r\n     }\r\n     h1 {\r\n       font-size: 26px;\r\n       font-weight: bold;\r\n"
                },
                {
                    "date": 1740107182589,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,9 @@\n       text-align: center;\r\n       display: flex;\r\n       flex-direction: column;\r\n       align-items: center;\r\n+      justify-content: center;\r\n     }\r\n     h1 {\r\n       font-size: 26px;\r\n       font-weight: bold;\r\n"
                },
                {
                    "date": 1740107224136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,9 +171,9 @@\n \r\n   \r\n   <!-- [섹션 1] 직접 입력 방식 -->\r\n   <section id=\"section1\">\r\n-    <h1>내 위치 기반 스타벅스 매장 찾기 (직접 입력)</h1>\r\n+    <h1>경도 & 위도 기반 스타벅스 매장 찾기 (직접 입력)</h1>\r\n     <p>아래 입력란에 위도와 경도를 직접 입력한 후, 버튼을 눌러 해당 위치에서 가장 가까운 스타벅스를 확인합니다.</p>\r\n \r\n     <!-- 예시 좌표 영역 -->\r\n     <div class=\"sample\">\r\n"
                },
                {
                    "date": 1740107303004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n       text-align: center;\r\n       display: flex;\r\n       flex-direction: column;\r\n       align-items: center;\r\n-      justify-content: center;\r\n+      <!-- justify-content: center; -->\r\n     }\r\n     h1 {\r\n       font-size: 26px;\r\n       font-weight: bold;\r\n"
                },
                {
                    "date": 1740107362651,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,14 +8,14 @@\n     body {\r\n       font-family: 'Noto Sans KR', Arial, sans-serif;\r\n       background-color: #f2f0eb;\r\n       margin: 0;\r\n-      padding: 20px;\r\n+      padding: 10px;\r\n       text-align: center;\r\n       display: flex;\r\n       flex-direction: column;\r\n       align-items: center;\r\n-      <!-- justify-content: center; -->\r\n+\r\n     }\r\n     h1 {\r\n       font-size: 26px;\r\n       font-weight: bold;\r\n"
                },
                {
                    "date": 1740107373362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,8 @@\n     body {\r\n       font-family: 'Noto Sans KR', Arial, sans-serif;\r\n       background-color: #f2f0eb;\r\n       margin: 0;\r\n-      padding: 10px;\r\n       text-align: center;\r\n       display: flex;\r\n       flex-direction: column;\r\n       align-items: center;\r\n"
                },
                {
                    "date": 1740107383934,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,8 @@\n   <style>\r\n     body {\r\n       font-family: 'Noto Sans KR', Arial, sans-serif;\r\n       background-color: #f2f0eb;\r\n-      margin: 0;\r\n       text-align: center;\r\n       display: flex;\r\n       flex-direction: column;\r\n       align-items: center;\r\n"
                },
                {
                    "date": 1740108355475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n   <link rel=\"stylesheet\" href=\"./css/style.css\">\r\n   <style>\r\n     body {\r\n       font-family: 'Noto Sans KR', Arial, sans-serif;\r\n-      background-color: #f2f0eb;\r\n+      background-color: #f2f0eb;      \r\n       text-align: center;\r\n       display: flex;\r\n       flex-direction: column;\r\n       align-items: center;\r\n"
                },
                {
                    "date": 1740108626360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -166,9 +166,11 @@\n   <script src=\"https://cdn.jsdelivr.net/npm/@turf/turf@6/turf.min.js\"></script>\r\n </head>\r\n <body>\r\n \r\n-  \r\n+  <a href=\"main.html\" class=\"logo\">\r\n+    <img src=\"./images/starbucks_logo.png\" alt=\"STARBUCKS\" />\r\n+</a>\r\n   <!-- [섹션 1] 직접 입력 방식 -->\r\n   <section id=\"section1\">\r\n     <h1>경도 & 위도 기반 스타벅스 매장 찾기 (직접 입력)</h1>\r\n     <p>아래 입력란에 위도와 경도를 직접 입력한 후, 버튼을 눌러 해당 위치에서 가장 가까운 스타벅스를 확인합니다.</p>\r\n"
                },
                {
                    "date": 1740109402446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -416,19 +416,24 @@\n         throw error;\r\n       }\r\n     }\r\n     \r\n-    document.getElementById(\"findBtn2\").addEventListener(\"click\", async () => {\r\n+    ;\r\n+  </script>\r\n+  <script>\r\n+    document.getElementById(\"findBtn1\").document.getElementById(\"findBtn2\").addEventListener(\"click\", async () => {\r\n       const resultDiv = document.getElementById(\"result2\");\r\n       resultDiv.style.display = \"block\";\r\n-      resultDiv.innerHTML = `<p class=\"detail\">데이터를 불러오고 위치를 확인 중입니다...</p>`;\r\n+      resultDiv.innerHTML = `<p class=\"detail\">데이터를 불러오고 위치를 확인 중입니다...</p>\r\n+                             <p class=\"detail loading\">스타벅스 매장 정보를 가져오는 중입니다...</p>`;\r\n+    \r\n       try {\r\n         await loadMappingData();\r\n         await loadDistrictPolygons();\r\n         const position = await getCurrentLocation();\r\n         const currentLat = position.coords.latitude;\r\n         const currentLng = position.coords.longitude;\r\n-        \r\n+    \r\n         const district = determineDistrict(currentLat, currentLng);\r\n         let sido_cd = mappingData.sidoMapping[\"서울\"]; // 기본값: 서울\r\n         let gugun_cd;\r\n         let districtMessage;\r\n@@ -438,22 +443,23 @@\n         } else {\r\n           gugun_cd = \"0119\"; // 기본값: 중구\r\n           districtMessage = \"현재 위치가 어느 구에도 속하지 않아 기본값(중구)을 사용합니다.\";\r\n         }\r\n-        \r\n+    \r\n         let finalHTML = `<p class=\"detail\">현재 좌표: <span class=\"highlight\">${currentLat.toFixed(5)}, ${currentLng.toFixed(5)}</span></p>\r\n                          <p class=\"detail\">${districtMessage}</p>\r\n                          <p class=\"detail\">(사용 코드: <span class=\"highlight\">${sido_cd} / ${gugun_cd}</span>)</p>`;\r\n-        finalHTML += `<p class=\"detail\">스타벅스 매장 정보를 가져오는 중입니다...</p>`;\r\n-        resultDiv.innerHTML = finalHTML;\r\n-        \r\n+    \r\n+        resultDiv.innerHTML = finalHTML + `<p class=\"detail loading\">스타벅스 매장 정보를 가져오는 중입니다...</p>`;\r\n+    \r\n         const stores = await fetchStarbucksStoresByDistrict(currentLat, currentLng, sido_cd, gugun_cd);\r\n+    \r\n         if (!stores || stores.length === 0) {\r\n           finalHTML += `<p class=\"detail\">매장 정보를 불러오지 못했습니다.</p>`;\r\n           resultDiv.innerHTML = finalHTML;\r\n           return;\r\n         }\r\n-        \r\n+    \r\n         const nearestStore = findNearestStore(stores, currentLat, currentLng);\r\n         if (nearestStore) {\r\n           finalHTML += `<p class=\"header\">가장 가까운 스타벅스 매장</p>\r\n                         <p class=\"detail\">매장명: <span class=\"highlight\">${nearestStore.s_name}</span></p>\r\n@@ -461,16 +467,16 @@\n                         <p class=\"detail\">약 <span class=\"highlight\">${nearestStore.distance.toFixed(2)}</span> km 떨어져 있습니다.</p>`;\r\n         } else {\r\n           finalHTML += `<p class=\"detail\">좌표 정보를 찾을 수 없는 매장이 있습니다.</p>`;\r\n         }\r\n+    \r\n+        // 응답을 받은 후 로딩 메시지 제거하고 최종 결과 표시\r\n         resultDiv.innerHTML = finalHTML;\r\n       } catch (error) {\r\n         resultDiv.innerHTML = `<p class=\"detail\">에러 발생: ${error.message}</p>`;\r\n       }\r\n     });\r\n-  </script>\r\n-  <script>\r\n-    document.getElementById(\"findBtn1\").addEventListener(\"click\", async () => {\r\n+    addEventListener(\"click\", async () => {\r\n       const resultDiv = document.getElementById(\"result1\");\r\n       resultDiv.style.display = \"block\";\r\n       resultDiv.innerHTML = `<p class=\"loading\">스타벅스 매장 정보를 가져오는 중입니다...</p>`;\r\n       \r\n"
                },
                {
                    "date": 1740109446972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -415,13 +415,9 @@\n         console.error(\"스타벅스 매장 데이터 요청 에러:\", error);\r\n         throw error;\r\n       }\r\n     }\r\n-    \r\n-    ;\r\n-  </script>\r\n-  <script>\r\n-    document.getElementById(\"findBtn1\").document.getElementById(\"findBtn2\").addEventListener(\"click\", async () => {\r\n+    document.getElementById(\"findBtn2\").addEventListener(\"click\", async () => {\r\n       const resultDiv = document.getElementById(\"result2\");\r\n       resultDiv.style.display = \"block\";\r\n       resultDiv.innerHTML = `<p class=\"detail\">데이터를 불러오고 위치를 확인 중입니다...</p>\r\n                              <p class=\"detail loading\">스타벅스 매장 정보를 가져오는 중입니다...</p>`;\r\n@@ -474,9 +470,15 @@\n       } catch (error) {\r\n         resultDiv.innerHTML = `<p class=\"detail\">에러 발생: ${error.message}</p>`;\r\n       }\r\n     });\r\n-    addEventListener(\"click\", async () => {\r\n+    \r\n+\r\n+\r\n+    ;\r\n+  </script>\r\n+  <script>\r\n+    document.getElementById(\"findBtn1\").addEventListener(\"click\", async () => {\r\n       const resultDiv = document.getElementById(\"result1\");\r\n       resultDiv.style.display = \"block\";\r\n       resultDiv.innerHTML = `<p class=\"loading\">스타벅스 매장 정보를 가져오는 중입니다...</p>`;\r\n       \r\n"
                },
                {
                    "date": 1740109511563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -501,9 +501,9 @@\n \r\n       // 스타벅스 API 호출 예제\r\n       setTimeout(() => {\r\n         resultDiv.innerHTML = `<p class=\"detail\">입력된 위치: <span class=\"highlight\">${currentLat.toFixed(5)}, ${currentLng.toFixed(5)}</span></p>\r\n-                               <p class=\"highlight\">가장 가까운 스타벅스 매장</p>\r\n+                               <p class=\"header\">가장 가까운 스타벅스 매장</p>\r\n                                <p>매장명: <span class=\"highlight\">광화문우체국</span></p>\r\n                                <p>주소: 서울특별시 종로구 서린동 154-1 광화문우체국</p>\r\n                                <p>약 <span class=\"highlight\">0.39 km</span> 떨어져 있습니다.</p>`;\r\n       }, 2000);\r\n"
                }
            ],
            "date": 1739941268096,
            "name": "Commit-0",
            "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n  <title>Document</title>\r\n</head>\r\n<body>\r\n  \r\n</body>\r\n</html>"
        }
    ]
}