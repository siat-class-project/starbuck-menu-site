{
    "sourceFile": "test.html",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1739941268096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740097808277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,253 @@\n <!DOCTYPE html>\r\n-<html lang=\"en\">\r\n+<html lang=\"ko\">\r\n <head>\r\n   <meta charset=\"UTF-8\">\r\n-  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n-  <title>Document</title>\r\n+  <title>내 위치 기반 스타벅스 매장 찾기 - 통합버전</title>\r\n+  <link rel=\"stylesheet\" href=\"style.css\">\r\n+\r\n+  <!-- Turf.js 라이브러리 (CDN) -->\r\n\\ No newline at end of file\n+  <script src=\"https://cdn.jsdelivr.net/npm/@turf/turf@6/turf.min.js\"></script>\r\n </head>\r\n <body>\r\n+  <!-- [섹션 1] 직접 입력 방식 -->\r\n+  <section id=\"section1\">\r\n+    <h1>내 위치에서 가장 가까운 스타벅스 찾기 (직접 입력)</h1>\r\n+    <p>아래 입력란에 위도와 경도를 직접 입력한 후, 버튼을 눌러 해당 위치에서 가장 가까운 스타벅스를 확인합니다.</p>\r\n+    <div>\r\n+      <input type=\"text\" id=\"latitude1\" placeholder=\"위도 입력 (예: 37.5665)\">\r\n+      <input type=\"text\" id=\"longitude1\" placeholder=\"경도 입력 (예: 126.9780)\">\r\n+    </div>\r\n+    <button id=\"findBtn1\">가장 가까운 스타벅스 찾기</button>\r\n+    <div id=\"result1\" class=\"result-box\"></div>\r\n+  </section>\r\n   \r\n+  <hr>\r\n+  \r\n+  <!-- [섹션 2] Geolocation 및 구 판별 방식 -->\r\n+  <section id=\"section2\">\r\n+    <h1>내 위치 기반 스타벅스 매장 찾기 (구 판별)</h1>\r\n+    <p>\r\n+      현재 위치의 위도/경도만으로 어느 구·군에 있는지 판별한 후, 해당 시도/구군 코드를 사용해 스타벅스 매장 정보를 가져옵니다.\r\n+    </p>\r\n+    <button id=\"findBtn2\">가장 가까운 스타벅스 찾기</button>\r\n+    <div id=\"result2\" class=\"result-box\"></div>\r\n+  </section>\r\n+  \r\n+  <script>\r\n+    /* ===============================\r\n+       [공통 함수들]\r\n+    ================================ */\r\n+    function computeDistance(lat1, lon1, lat2, lon2) {\r\n+      const toRad = x => x * Math.PI / 180;\r\n+      const R = 6371; // km\r\n+      const dLat = toRad(lat2 - lat1);\r\n+      const dLon = toRad(lon2 - lon1);\r\n+      const a = Math.sin(dLat/2) ** 2 +\r\n+                Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *\r\n+                Math.sin(dLon/2) ** 2;\r\n+      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n+      return R * c;\r\n+    }\r\n+    \r\n+    function findNearestStore(stores, currentLat, currentLng) {\r\n+      let nearestStore = null;\r\n+      let minDistance = Infinity;\r\n+      stores.forEach(store => {\r\n+        const storeLat = parseFloat(store.lat);\r\n+        const storeLng = store.lng ? parseFloat(store.lng) : parseFloat(store.lot);\r\n+        if (isNaN(storeLat) || isNaN(storeLng)) return;\r\n+        const distance = computeDistance(currentLat, currentLng, storeLat, storeLng);\r\n+        if (distance < minDistance) {\r\n+          minDistance = distance;\r\n+          nearestStore = { ...store, distance };\r\n+        }\r\n+      });\r\n+      return nearestStore;\r\n+    }\r\n+    \r\n+    /* ===============================\r\n+       [섹션 1] 직접 입력 방식 관련\r\n+    ================================ */\r\n+    async function fetchStarbucksStoresDirect(lat, lng) {\r\n+      // 예제에서는 서울(01) / 해운대구(0118) 사용\r\n+      const sido_cd = \"01\";\r\n+      const gugun_cd = \"0118\";\r\n+      const formData = new URLSearchParams();\r\n+      formData.append('ins_lat', lat);\r\n+      formData.append('ins_lng', lng);\r\n+      formData.append('p_sido_cd', sido_cd);\r\n+      formData.append('p_gugun_cd', gugun_cd);\r\n+      formData.append('in_biz_cd', '');\r\n+      formData.append('iend', '2000');\r\n+      formData.append('set_date', '');\r\n+      \r\n+      try {\r\n+        const response = await fetch(\"https://www.starbucks.co.kr/store/getStore.do\", {\r\n+          method: \"POST\",\r\n+          headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n+          body: formData.toString()\r\n+        });\r\n+        const data = await response.json();\r\n+        return data.list;\r\n+      } catch (error) {\r\n+        console.error(\"스타벅스 매장 데이터 요청 에러:\", error);\r\n+        throw error;\r\n+      }\r\n+    }\r\n+    \r\n+    document.getElementById(\"findBtn1\").addEventListener(\"click\", async () => {\r\n+      const resultDiv = document.getElementById(\"result1\");\r\n+      const latInput = document.getElementById(\"latitude1\").value.trim();\r\n+      const lngInput = document.getElementById(\"longitude1\").value.trim();\r\n+      if (!latInput || !lngInput) {\r\n+        resultDiv.innerHTML = \"<p class='detail'>위도와 경도를 입력하세요.</p>\";\r\n+        return;\r\n+      }\r\n+      const currentLat = parseFloat(latInput);\r\n+      const currentLng = parseFloat(lngInput);\r\n+      if (isNaN(currentLat) || isNaN(currentLng)) {\r\n+        resultDiv.innerHTML = \"<p class='detail'>유효한 위도와 경도를 입력하세요.</p>\";\r\n+        return;\r\n+      }\r\n+      resultDiv.innerHTML = `<p class=\"detail\">입력된 위치: <span class=\"highlight\">${currentLat.toFixed(5)}, ${currentLng.toFixed(5)}</span></p>\r\n+                              <p class=\"detail\">스타벅스 매장 정보를 가져오는 중입니다...</p>`;\r\n+      try {\r\n+        const stores = await fetchStarbucksStoresDirect(currentLat, currentLng);\r\n+        if (!stores || stores.length === 0) {\r\n+          resultDiv.innerHTML += \"<p class='detail'>매장 정보를 불러오지 못했습니다.</p>\";\r\n+          return;\r\n+        }\r\n+        const nearestStore = findNearestStore(stores, currentLat, currentLng);\r\n+        if (nearestStore) {\r\n+          resultDiv.innerHTML += `<p class=\"header\">가장 가까운 스타벅스 매장</p>\r\n+                                  <p class=\"detail\">매장명: <span class=\"highlight\">${nearestStore.s_name}</span></p>\r\n+                                  <p class=\"detail\">주소: <span class=\"highlight\">${nearestStore.addr}</span></p>\r\n+                                  <p class=\"detail\">약 <span class=\"highlight\">${nearestStore.distance.toFixed(2)}</span> km 떨어져 있습니다.</p>`;\r\n+        } else {\r\n+          resultDiv.innerHTML += \"<p class='detail'>좌표 정보를 찾을 수 없는 매장이 있습니다.</p>\";\r\n+        }\r\n+      } catch (error) {\r\n+        resultDiv.innerHTML = `<p class=\"detail\">에러 발생: ${error.message}</p>`;\r\n+      }\r\n+    });\r\n+    \r\n+    /* ===============================\r\n+       [섹션 2] Geolocation + 구 판별 방식 관련\r\n+       - mapping.json과 krDistricts.json 파일 필요 (서버에 존재해야 함)\r\n+    ================================ */\r\n+    let mappingData = {};\r\n+    let districtPolygons = [];\r\n+    \r\n+    async function loadMappingData() {\r\n+      try {\r\n+        const response = await fetch('mapping.json');\r\n+        mappingData = await response.json();\r\n+      } catch (error) {\r\n+        console.error(\"mapping.json 로드 에러:\", error);\r\n+      }\r\n+    }\r\n+    \r\n+    async function loadDistrictPolygons() {\r\n+      try {\r\n+        const response = await fetch('krDistricts.json');\r\n+        const data = await response.json();\r\n+        districtPolygons = data.districtPolygons;\r\n+      } catch (error) {\r\n+        console.error(\"krDistricts.json 로드 에러:\", error);\r\n+      }\r\n+    }\r\n+    \r\n+    function getCurrentLocation() {\r\n+      return new Promise((resolve, reject) => {\r\n+        if (navigator.geolocation) {\r\n+          navigator.geolocation.getCurrentPosition(resolve, reject);\r\n+        } else {\r\n+          reject(new Error(\"Geolocation을 지원하지 않는 브라우저입니다.\"));\r\n+        }\r\n+      });\r\n+    }\r\n+    \r\n+    // Turf.js를 이용해 현재 위치의 구·군 판별\r\n+    function determineDistrict(lat, lng) {\r\n+      const point = turf.point([lng, lat]);\r\n+      for (let district of districtPolygons) {\r\n+        if (turf.booleanPointInPolygon(point, district.polygon)) {\r\n+          return district;\r\n+        }\r\n+      }\r\n+      return null;\r\n+    }\r\n+    \r\n+    async function fetchStarbucksStoresByDistrict(lat, lng, sido_cd, gugun_cd) {\r\n+      const formData = new URLSearchParams();\r\n+      formData.append('ins_lat', lat);\r\n+      formData.append('ins_lng', lng);\r\n+      formData.append('p_sido_cd', sido_cd);\r\n+      formData.append('p_gugun_cd', gugun_cd);\r\n+      formData.append('in_biz_cd', '');\r\n+      formData.append('iend', '2000');\r\n+      formData.append('set_date', '');\r\n+      \r\n+      try {\r\n+        const response = await fetch(\"https://www.starbucks.co.kr/store/getStore.do\", {\r\n+          method: \"POST\",\r\n+          headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n+          body: formData.toString()\r\n+        });\r\n+        const data = await response.json();\r\n+        return data.list;\r\n+      } catch (error) {\r\n+        console.error(\"스타벅스 매장 데이터 요청 에러:\", error);\r\n+        throw error;\r\n+      }\r\n+    }\r\n+    \r\n+    document.getElementById(\"findBtn2\").addEventListener(\"click\", async () => {\r\n+      const resultDiv = document.getElementById(\"result2\");\r\n+      resultDiv.innerHTML = \"<p class='detail'>데이터를 불러오고 위치를 확인 중입니다...</p>\";\r\n+      try {\r\n+        await loadMappingData();\r\n+        await loadDistrictPolygons();\r\n+        const position = await getCurrentLocation();\r\n+        const currentLat = position.coords.latitude;\r\n+        const currentLng = position.coords.longitude;\r\n+        \r\n+        const district = determineDistrict(currentLat, currentLng);\r\n+        let sido_cd = mappingData.sidoMapping[\"서울\"]; // 기본값: 서울\r\n+        let gugun_cd;\r\n+        let districtMessage;\r\n+        if (district) {\r\n+          gugun_cd = district.code;\r\n+          districtMessage = `현재 위치는 <span class=\"highlight\">${district.name}</span>에 속합니다.`;\r\n+        } else {\r\n+          gugun_cd = \"0119\"; // 기본값: 중구\r\n+          districtMessage = \"현재 위치가 어느 구에도 속하지 않아 기본값(중구)을 사용합니다.\";\r\n+        }\r\n+        \r\n+        resultDiv.innerHTML = `<p class=\"detail\">현재 좌표: <span class=\"highlight\">${currentLat.toFixed(5)}, ${currentLng.toFixed(5)}</span></p>\r\n+                               <p class=\"detail\">${districtMessage}</p>\r\n+                               <p class=\"detail\">(사용 코드: <span class=\"highlight\">${sido_cd} / ${gugun_cd}</span>)</p>\r\n+                               <p class=\"detail\">스타벅스 매장 정보를 가져오는 중입니다...</p>`;\r\n+        \r\n+        const stores = await fetchStarbucksStoresByDistrict(currentLat, currentLng, sido_cd, gugun_cd);\r\n+        if (!stores || stores.length === 0) {\r\n+          resultDiv.innerHTML += \"<p class='detail'>매장 정보를 불러오지 못했습니다.</p>\";\r\n+          return;\r\n+        }\r\n+        \r\n+        const nearestStore = findNearestStore(stores, currentLat, currentLng);\r\n+        if (nearestStore) {\r\n+          resultDiv.innerHTML += `<p class=\"header\">가장 가까운 스타벅스 매장</p>\r\n+                                  <p class=\"detail\">매장명: <span class=\"highlight\">${nearestStore.s_name}</span></p>\r\n+                                  <p class=\"detail\">주소: <span class=\"highlight\">${nearestStore.addr}</span></p>\r\n+                                  <p class=\"detail\">약 <span class=\"highlight\">${nearestStore.distance.toFixed(2)}</span> km 떨어져 있습니다.</p>`;\r\n+        } else {\r\n+          resultDiv.innerHTML += \"<p class='detail'>좌표 정보를 찾을 수 없는 매장이 있습니다.</p>\";\r\n+        }\r\n+      } catch (error) {\r\n+        resultDiv.innerHTML = `<p class=\"detail\">에러 발생: ${error.message}</p>`;\r\n+      }\r\n+    });\r\n+  </script>\r\n </body>\r\n-</html>\n+</html>\r\n"
                },
                {
                    "date": 1740097932399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n <html lang=\"ko\">\r\n <head>\r\n   <meta charset=\"UTF-8\">\r\n   <title>내 위치 기반 스타벅스 매장 찾기 - 통합버전</title>\r\n-  <link rel=\"stylesheet\" href=\"style.css\">\r\n+  <link rel=\"stylesheet\" href=\"./css/style.css\">\r\n \r\n   <!-- Turf.js 라이브러리 (CDN) -->\r\n   <script src=\"https://cdn.jsdelivr.net/npm/@turf/turf@6/turf.min.js\"></script>\r\n </head>\r\n@@ -249,5 +249,5 @@\n       }\r\n     });\r\n   </script>\r\n </body>\r\n-</html>\n\\ No newline at end of file\n+</html>\r\n"
                }
            ],
            "date": 1739941268096,
            "name": "Commit-0",
            "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n  <title>Document</title>\r\n</head>\r\n<body>\r\n  \r\n</body>\r\n</html>"
        }
    ]
}